/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/LowProfile/Create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new Iframe \ Redirect page
         * @description Create iframe redirect page to charge the customer
         */
        post: operations["LowProfile_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/LowProfile/GetLpResult": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the result of an Iframe \ Redirect deal
         * @description Create iframe redirect page to charge the customer
         */
        post: operations["LowProfile_GetLpResult"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/GetMuhlafimFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get muhlafim cards
         * @description Recurring Payments
         */
        post: operations["RecuringPayments_GetMuhlafimFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/GetRecurringPayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recurring payment info
         * @description Recurring Payments
         */
        get: operations["RecuringPayments_GetRecurringPayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/GetRecurringPaymentHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recurring payment history
         * @description Recurring Payments
         */
        get: operations["RecuringPayments_GetRecurringPaymentHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/GetMuhlafimByDate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get muhlafim tokens
         * @description Recurring Payments
         */
        post: operations["RecuringPayments_GetMuhlafimByDate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/IsBankNumberValid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Is Bank Number Valid
         * @description Recurring Payments
         */
        get: operations["RecuringPayments_IsBankNumberValid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RecuringPayments/ChangeStatusForHistoryRecurringToIrrevocable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update debit order history item to irrevocable status
         * @description Recurring Payments
         */
        post: operations["RecuringPayments_ChangeStatusForHistoryRecurringToIrrevocable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Account/GetByAccountId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Account info by cardcom Account Id
         * @description Account operation
         */
        post: operations["Account_GetByAccountId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/ListTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List of Transactions
         * @description Transactions operation
         */
        post: operations["Transactions_ListTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/GetTransactionInfoById": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Transaction Info By Id
         * @description Transactions operation
         */
        post: operations["Transactions_GetTransactionInfoById"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/Transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Do Transaction
         * @description Transactions operation
         */
        post: operations["Transactions_Transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/RefundByTransactionId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund By Transaction Id
         * @description Transactions operation
         */
        post: operations["Transactions_RefundByTransactionId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/SpecialTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Special Transactions
         * @description get other transaction if you use CardCom as acquire
         */
        post: operations["Transactions_SpecialTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Transactions/GetTransactionByExternalUniqTran": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query Transaction By ExternalUniqTranId
         * @description use to validate if there is a successful transaction using the External UniqTranId parameter
         */
        post: operations["Transactions_GetTransactionByExternalUniqTran"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/CreateDocument": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a document associated to a deal
         * @description Documents operations
         */
        post: operations["Documents_CreateDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/CancelDoc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel document and refund credit card
         * @description Documents operations
         */
        post: operations["Documents_CancelDoc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/SendAllDocumentsToEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * send PDF docuemnts to email by date range
         * @description Documents operations
         */
        post: operations["Documents_SendAllDocumentsToEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/GetReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query invoice documents
         * @description Documents operations
         */
        post: operations["Documents_GetReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/CrossDocument": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cross document
         * @description Documents operations
         */
        post: operations["Documents_CrossDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/CreateTaxInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Tax invoice
         * @description Documents operations
         */
        post: operations["Documents_CreateTaxInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Documents/CreateDocumentUrl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create document URL
         * @description Documents operations
         */
        post: operations["Documents_CreateDocumentUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetCompanyStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get company status - Validate KYC info
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetCompanyStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/AddDocumentToCompany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add document to company
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_AddDocumentToCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/ValidateCompanyCreation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate company fields
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_ValidateCompanyCreation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/NewCompany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New company
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_NewCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/CloseCompany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Close company
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_CloseCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/ReOpenCompany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reopen company
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_ReOpenCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetCities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cities
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetCities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetStreets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get streets
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetStreets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetCountries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get countries
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetBanks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get banks
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetBanks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetBanksBranches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get banks branches
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetBanksBranches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetMainMCCs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Main MCCs
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetMainMCCs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/GetSubMCCs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sub MCCs
         * @description RecruitmentSystem operations
         */
        get: operations["CompanyOperations_GetSubMCCs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/MeagedAddCompany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Company for Meaged
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_MeagedAddCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CompanyOperations/MeagedGetCompanyInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get sapak numbers status by SapakNumber or BusinessRegistrationNumber
         * @description RecruitmentSystem operations
         */
        post: operations["CompanyOperations_MeagedGetCompanyInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Financial/CreditCardTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreditCard Transactions */
        post: operations["Financial_CreditCardTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Financial/CreditCardTransactionsHalted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreditCard Transactions - Halted */
        post: operations["Financial_CreditCardTransactionsHalted"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Financial/FinancialTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finacial tranzaction */
        post: operations["Financial_FinancialTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Financial/BankDeposites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank Deposites */
        post: operations["Financial_BankDeposites"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Financial/GetSlikaInvoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get billing report for account */
        post: operations["Financial_GetSlikaInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TapTransactions/PrepareDevice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * PrepareDevice - Get device information before performing Tap On Phone transaction
         * @description Tap On Phone operations
         */
        post: operations["TapTransactions_PrepareDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TapTransactions/ProcessTransaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ProcessTransaction - Process Tap On Phone transaction
         * @description Tap On Phone operations
         */
        post: operations["TapTransactions_ProcessTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TapTransactions/GetTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * GetTransactions - Get all TAP transaction by given terminal number and dates range
         * @description Tap On Phone operations
         */
        post: operations["TapTransactions_GetTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TapTransactions/GetDevices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * GetDevices - Get all registered TAP devices
         * @description Tap On Phone operations
         */
        post: operations["TapTransactions_GetDevices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Response for creating low profile page */
        CreateLowProfileResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: guid
             * @description The unique Id of the low profile page - save it in you data base!
             */
            LowProfileId?: string | null;
            /** @description the url you need to redirect the card holder */
            Url?: string | null;
            /** @description the url you need to redirect the card holder */
            UrlToPayPal?: string | null;
            /** @description the url you need to redirect the card holder */
            UrlToBit?: string | null;
        };
        /** @description error information for non http status 200 */
        ErrorInfo: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
        };
        /** @description create a new one time, Iframe \ redirect page */
        CreateLowProfile: {
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /** @description Api Name for authentication */
            ApiName?: string;
            /**
             * @description Type of operation to perform , default - ChargeOnly
             * @default ChargeOnly
             */
            Operation: components["schemas"]["Operation"];
            /** @description A string of data to save on the transaction, usually send your unique order Id, you will get it back in the WebHook URL */
            ReturnValue?: string | null;
            /**
             * Format: decimal
             * @description Amount of tranzaction (12.36)
             */
            Amount: number;
            /** @description Url to redirect the card holder on successful transaction , (http(s)://site.com/Success) */
            SuccessRedirectUrl: string;
            /** @description Url to redicet on failed transaction (http(s)://site.com/failed) */
            FailedRedirectUrl: string;
            CancelRedirectUrl?: string | null;
            /** @description A webhook URL is a web address that receives real-time data about the transaction */
            WebHookUrl: string;
            /** @description Text to show to card holder if no documents is send */
            ProductName?: string | null;
            /**
             * @description Page Language - he,en,ru,sp (https://cardcomapinametovalue.zendesk.com/hc/he/articles/27007768777234-שפות-לדף-פרופיל-נמוך-Language)
             * @default he
             */
            Language: string | null;
            /**
             * Format: int32
             * @description ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217
             * @default 1
             */
            ISOCoinId: number | null;
            /** @description UI Definition for the created page */
            UIDefinition?: components["schemas"]["UIDefinition"] | null;
            /** @description Advanced transaction definition */
            AdvancedDefinition?: components["schemas"]["AdvancedLPDefinition"] | null;
            /** @description Document information */
            Document?: components["schemas"]["DocumentLP"] | null;
            /** @description Document information */
            UTM?: components["schemas"]["LPUtmData"] | null;
        };
        /** @enum {string} */
        Operation: "ChargeOnly" | "ChargeAndCreateToken" | "CreateTokenOnly" | "SuspendedDeal" | "Do3DSAndSubmit";
        /** @description UI Definition for the created page */
        UIDefinition: {
            /**
             * @description Hide card Owner name
             * @default false
             */
            IsHideCardOwnerName: boolean | null;
            /**
             * @description Fill the value of CardOwnerName input box
             * @default
             */
            CardOwnerNameValue: string | null;
            /**
             * @description Card onwer Id aka teudat zeut
             * @default
             */
            CardOwnerIdValue: string | null;
            /**
             * @description Hide card owner phone number
             * @default false
             */
            IsHideCardOwnerPhone: boolean | null;
            /** @description Fill the value of CardOwnerPhone input box */
            CardOwnerPhoneValue?: string | null;
            /**
             * @description Is CardOwnerPhone input box required
             * @default true
             */
            IsCardOwnerPhoneRequired: boolean | null;
            /** @description fill the value of card owner email */
            CardOwnerEmailValue?: string | null;
            /**
             * @description Hide card owner email
             * @default false
             */
            IsHideCardOwnerEmail: boolean | null;
            /**
             * @description Is card owner email input box required
             * @default true
             */
            IsCardOwnerEmailRequired: boolean | null;
            /**
             * @description Hide card ownder identity number
             * @default false
             */
            IsHideCardOwnerIdentityNumber: boolean | null;
            /**
             * @description Hide card number CVV
             * @default false
             */
            IsHideCVV: boolean | null;
            /** @description Full URL address of CSS file. it will be injected to page, required CardCom premition (http(s)://site.com/file.css) */
            CSSUrl?: string | null;
            /** @description Fill the value of CustomFields input box by Field Id */
            CustomFields?: components["schemas"]["CustomField"][] | null;
            /** @description Set how the Google Pay button will appear */
            GooglePayBtnDesign?: components["schemas"]["GooglePayBtnDesign"] | null;
        };
        /** @description Custom field */
        CustomField: {
            /** @description Custom field id */
            Id?: number;
            /** @description Custom field value */
            Value?: string;
        };
        GooglePayBtnDesign: {
            /** @description GPay button color */
            ButtonColor?: components["schemas"]["ButtonColor"];
            /**
             * @description GPay button type (text on the button)
             * @default Buy
             */
            ButtonType: components["schemas"]["ButtonType"];
            /**
             * @description GPay button language
             * @default English
             */
            ButtonLocale: components["schemas"]["ButtonLocale"];
            /**
             * @description GPay button width. Default 328 (px)
             * @default 328
             */
            ButtonWidth: string | null;
            /**
             * @description GPay button height. Default 40 (px)
             * @default 4
             */
            ButtonHeight: string | null;
        };
        /** @enum {string} */
        ButtonColor: "Default" | "White" | "Black";
        /** @enum {string} */
        ButtonType: "Book" | "Buy" | "Checkout" | "Donate" | "Order" | "Pay" | "Plain" | "Subscribe";
        /** @enum {string} */
        ButtonLocale: "Arabic" | "Bulgarian" | "Catalan" | "Chinese" | "Croatian" | "Czech" | "Danish" | "Dutch" | "English" | "Estonian" | "Finnish" | "French" | "German" | "Greek" | "Indonesian" | "Italian" | "Japanese" | "Korean" | "Malay" | "Norwegian" | "Polish" | "Portuguese" | "Russian" | "Serbian" | "Slovak" | "Slovenian" | "Spanish" | "Swedish" | "Thai" | "Turkish" | "Ukrainian";
        AdvancedLPDefinition: {
            /** @description virtual terminal mode propertis */
            VirtualTerminal?: components["schemas"]["VirtualTerminalParams"] | null;
            /**
             * @description Type of transaction for credit card in operation : CreateTokenOnly or Suspended deal, can be J2 (simple card validation) or J5 (authoriz)
             * @default 5
             */
            JValidateType: components["schemas"]["JValidateType"] | null;
            /**
             * @description Is AVS enabled validation enabled
             * @default false
             */
            IsAVSEnable: boolean | null;
            /** @description SapakMutav number, for meaged terminals */
            SapakMutav?: string | null;
            /**
             * @description Type of credit for the card, for israel cards only.  6 - israel credit for multiple payments
             * @default 1
             */
            CreditType: number | null;
            /**
             * @description Is the transaction will be a refund deal
             * @default false
             */
            IsRefundDeal: boolean | null;
            /** @description Required only if IsRefundDeal is true */
            ApiPassword?: string | null;
            /** @description ISO name (alternative to IsoCoinId). ISO Coin Name from list : https://en.wikipedia.org/wiki/ISO_4217 */
            ISOCoinName?: string | null;
            /**
             * Format: int32
             * @description Minimum number of payment to show to card holder
             * @default 1
             */
            MinNumOfPayments: number | null;
            /**
             * Format: int32
             * @description Maximum number of payment to show to card holder , default 1
             * @default 1
             */
            MaxNumOfPayments: number | null;
            /**
             * @description Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)
             * @default 0
             */
            SelectedNumOfPayments: number | null;
            /**
             * Format: decimal
             * @description Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)
             */
            FirstPayment?: number | null;
            /**
             * Format: decimal
             * @description Change the selectd number of payments in the UI selection box , default (MinNumOfPayments)
             */
            ConstPayment?: number | null;
            /**
             * Format: guid
             * @description 3-D secure and Token tranzactions can use token instead of card number,it will be used to charge the customer if exist
             */
            Token?: string | null;
            /** @description Card expiration year will be pre-set to the customer. 4 characters string. */
            CardExpirationYear?: string | null;
            /** @description Card expiration Month will be pre-set to the customer. Values 01-12 */
            CardExpirationMonth?: string | null;
            /**
             * @description Full card number, a token will be created and can be used to start 3DS process and charge
             * @default
             */
            CardNumber: string | null;
            /**
             * @description CVV used for 3DS process and charge
             * @default
             */
            CVV: string | null;
            /** @description should this Tranasaction pass 3DSecure? Auto (or null): 3-D Secure validation will be performed as it configured by CardCom definition. Enable - Transaction will pass 3-D Secure validation. Disable - Transaction will NOT pass 3-D Secure validation */
            ThreeDSecureState?: components["schemas"]["ThreeDSecureState"] | null;
            /** @description Will open PinPad charge window on load */
            ShouldOpenPinpadOnPageLoad?: boolean | null;
            /**
             * @description Is payment performed in external payment page
             * @default false
             */
            IsExternal: boolean | null;
        };
        VirtualTerminalParams: {
            /**
             * @description Set to True if the tranzactio will be charge by the merchent and not by the card holder
             * @default false
             */
            IsEnable: boolean | null;
            /**
             * @description allow the merchent to change the sum of the transaction
             * @default false
             */
            IsOpenSum: boolean | null;
            /**
             * @description When using Credit Card reader , will the "commit" button be press after the merchent swipe the credit card
             * @default false
             */
            ChargeOnSwipe: boolean | null;
        };
        /** @enum {integer} */
        JValidateType: 2 | 5;
        /** @enum {string} */
        ThreeDSecureState: "Auto" | "Enabled" | "Disabled";
        DocumentLP: components["schemas"]["DocumentBase"] & {
            /**
             * @description Allow the card owner to edit the "document" information: To, address, phone... (not the products and amount) , default = false
             * @default false
             */
            IsAllowEditDocument: boolean | null;
            /**
             * @description Will only show the document information to the card owner. NO DOCCUMENT WILL BE CREATED. default = false (system will create a document)
             * @default false
             */
            IsShowOnlyDocument: boolean | null;
            /**
             * @description The language of the document to be created.
             * @default he
             */
            Language: string | null;
        };
        DocumentBase: {
            /**
             * @description Document type to create,  default = 0, will automatically update from admin panel configuration
             * @default Auto
             */
            DocumentTypeToCreate: components["schemas"]["DocumentToCreate"] | null;
            /** @description document To */
            Name: string;
            /** @description Business registration number or user Identity number */
            TaxId?: string | null;
            /** @description Email To send the document to */
            Email?: string | null;
            /**
             * @description Send the document by email
             * @default true
             */
            IsSendByEmail: boolean | null;
            /** @description Address Line 1 */
            AddressLine1?: string | null;
            /** @description Address Line 2 */
            AddressLine2?: string | null;
            /** @description City */
            City?: string | null;
            /** @description Mobile phone number */
            Mobile?: string | null;
            /** @description Land line phone number */
            Phone?: string | null;
            /** @description comments to print on the document */
            Comments?: string | null;
            /**
             * @description Is all the items in this document are VAT free?
             * @default false
             */
            IsVatFree: boolean | null;
            /** @description department ID as show at the admin panel, for reports */
            DepartmentId?: number | null;
            /** @description Advanced document definition */
            AdvancedDefinition?: components["schemas"]["AdvancedDocumentDefinition"] | null;
            /** @description Document products */
            Products?: components["schemas"]["Products"][];
            /** @description External Id, custom info on document */
            ExternalId?: string | null;
        };
        /** @enum {string} */
        DocumentToCreate: "Auto" | "TaxInvoiceAndReceipt" | "TaxInvoiceAndReceiptRefund" | "Receipt" | "ReceiptRefund" | "Quote" | "Order" | "OrderConfirmation" | "OrderConfirmationRefund" | "DeliveryNote" | "DeliveryNoteRefund" | "ProformaInvoice" | "DemandForPayment" | "DemandForPaymentRefund" | "ProformaDealInvoice" | "ProformaDealInvoiceRefund" | "TaxInvoice" | "ProformaInvoiceRefund" | "TaxInvoiceRefund" | "ReceiptForTaxInvoice" | "DonationReceipt" | "DonationReceiptRefund" | "ReceiptForTaxInvoiceRefund";
        /** @description Advanced document definition */
        AdvancedDocumentDefinition: {
            /**
             * @description Is to Auto update or create an Account, default = auto, will automatically update from admin panel configuration
             *      במידה ולא מועבר יתבצע איתור לפי  מפתח זר ולאחר מכן לפי מזהה ייחודי אתר ואז לפי  EMAIL לקוח. (הפרמטר הראשון שנמצע בשרת מולצב ולא ממשיך לחפש עוד )
             *
             * @default auto
             */
            IsAutoCreateUpdateAccount: components["schemas"]["ConfigBool"] | null;
            /** @description The account number on a Foreign system, use for transfer to 3-party account system ( hashavshevet, SAP ) */
            AccountForeignKey?: string | null;
            /** @description Your system unique Id for this account */
            SiteUniqueId?: string | null;
            /**
             * Format: int32
             * @description Unique account ID in cardcom system, account must exist in CardCom system
             */
            AccountID?: number | null;
            /**
             * @description If AccountID is passed, CardCom system will update the document information ( To ,HP_TZ, Email ...) from existing accounts information
             * @default false
             */
            IsLoadInfoFromAccountID: boolean | null;
        };
        /** @enum {string} */
        ConfigBool: "auto" | "true" | "false";
        /** @description Products */
        Products: {
            /** @description Product ID , exemple 'AVG-BB-10; */
            ProductID?: string | null;
            /** @description product description */
            Description: string;
            /**
             * Format: decimal
             * @description quantity
             * @default 1
             */
            Quantity: number | null;
            /**
             * Format: decimal
             * @description cost of one unit
             * @default 0
             */
            UnitCost: number;
            /**
             * Format: decimal
             * @description Recommended, if the Quantity contains decimal point send the total line cost to prevent round errors
             * @default 0
             */
            TotalLineCost: number | null;
            /**
             * @description Is this product VAT Free , used for mix VAT items in one documents
             * @default false
             */
            IsVatFree: boolean | null;
        };
        LPUtmData: {
            Source?: string | null;
            Medium?: string | null;
            Campaign?: string | null;
            Content?: string | null;
            Term?: string | null;
        };
        /** @description Result of the low profile page deal */
        LowProfileResult: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /**
             * Format: guid
             * @description The unique ID of the low profile transaction
             */
            LowProfileId?: string;
            /**
             * Format: int64
             * @description The Id of the Credit card Transacion
             */
            TranzactionId?: number;
            /** @description Same value that was sent on the CreateLowProfile request */
            ReturnValue?: string | null;
            /** @description Type of operation */
            Operation?: components["schemas"]["Operation"] | null;
            /** @description Will contain the value that the card holder enter in the UI */
            UIValues?: components["schemas"]["LowProfileUIValues"];
            /** @description Will no be null is a documents is created */
            DocumentInfo?: components["schemas"]["DocumentInfo"] | null;
            /** @description Created token information, Will no be null at operations:  ChargeAndCreateToken, CreateTokenOnly */
            TokenInfo?: components["schemas"]["TokenInfo"] | null;
            /** @description SuspendedI deal information, Will no be null at operations: SuspendedDeal */
            SuspendedInfo?: components["schemas"]["SuspendedInfo"] | null;
            /** @description Transaction information, Will no be null at operations: ChargeOnly, ChargeAndCreateToken  */
            TranzactionInfo?: components["schemas"]["TransactionInfo"] | null;
            /** @description ExternalPayment indicator.  */
            ExternalPaymentVector?: string | null;
            /** @description Country */
            Country?: string | null;
            /** @description UTM data  */
            UTM?: components["schemas"]["LPUtmData"] | null;
            /** @description Issuer authorization code description */
            IssuerAuthCodeDescription?: string | null;
        };
        /** @description values that was filled the the card holder */
        LowProfileUIValues: {
            /** @description Card Owner's email */
            CardOwnerEmail?: string;
            /** @description Card Owner name. */
            CardOwnerName?: string;
            /** @description Card Owner Phone. */
            CardOwnerPhone?: string;
            /** @description Card Owner identity Number */
            CardOwnerIdentityNumber?: string;
            /** @description number of payments for the deal */
            NumOfPayments?: number;
            /**
             * Format: int32
             * @description Card expiration year.
             */
            CardYear?: number;
            /**
             * Format: int32
             * @description card expiration month.
             */
            CardMonth?: number;
            /** @description Custome Fields values that were sent alongside the deal. */
            CustomFields?: components["schemas"]["CustomField"][] | null;
            /** @description boolean - is the card from isreal or is it a tourist card */
            IsAbroadCard?: boolean;
        };
        /** @description Document create response */
        DocumentInfo: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string;
            /** @description document type that was created */
            DocumentType?: components["schemas"]["DocumentType"];
            /**
             * Format: int32
             * @description Uniqe number for this DocumentType
             */
            DocumentNumber?: number;
            /**
             * Format: int32
             * @description Unique account Id in cardcom system
             */
            AccountId?: number;
            /** @description Customer accounting number, only if a customer card was created or consolidated. */
            ForeignAccountNumber?: string | null;
            /** @description Unique identifier for the site - informative parameter. */
            SiteUniqueId?: string | null;
            /** @description Url to a document (invoice, etc), if created */
            DocumentUrl?: string | null;
        };
        /** @enum {string} */
        DocumentType: "Error" | "TaxInvoiceAndReceipt" | "TaxInvoiceAndReceiptRefund" | "Receipt" | "ReceiptRefund" | "Quote" | "Order" | "SiteCustomerOrder" | "SiteCustomerOrderRefund" | "DeliveryNote" | "DeliveryNoteRefund" | "ProformaInvoice" | "DemandForPayment" | "DemandForPaymentRefund" | "TaxInvoice" | "TaxInvoiceRefund" | "ReceiptForTaxInvoice" | "DonationReceipt" | "DonationReceiptRefund" | "ReceiptForTaxInvoiceRefund";
        /** @description Create token result, You need to save all of the information in the database next to the account, it will be used in the Token charge process */
        TokenInfo: {
            /**
             * Format: guid
             * @description Credit card token use it for future charges
             */
            Token?: string;
            /** @description The date that the toke will be deleted from CardCom system, yyyyMMdd */
            TokenExDate?: string;
            /**
             * Format: int32
             * @description card expiration year
             */
            CardYear?: number;
            /**
             * Format: int32
             * @description card expiration month
             */
            CardMonth?: number;
            /** @description Issuer approval number for capture operation */
            TokenApprovalNumber?: string;
            /** @description card holder identity number */
            CardOwnerIdentityNumber?: string;
        };
        /** @description SuspendedDeal result */
        SuspendedInfo: {
            /**
             * Format: int32
             * @description Suspended deal Id, can be charge via API or the admin panel
             */
            SuspendedDealId?: number;
        };
        TransactionInfo: {
            /**
             * Format: int32
             * @description if equal zero then success , 700 and 701 success for J2 and J5 transaction
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int64
             * @description The Id of the Credit card Tranzacion
             */
            TranzactionId?: number;
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /**
             * Format: decimal
             * @description Transaction amount
             */
            Amount?: number;
            /**
             * Format: int32
             * @description ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217
             */
            CoinId?: number;
            /** @description Coupon Number - מספר שובר */
            CouponNumber?: string | null;
            /**
             * Format: date-time
             * @description Transaction date
             */
            CreateDate?: string;
            /**
             * Format: int32
             * @description The last 4 card digits.
             */
            Last4CardDigits?: number;
            /** @description The last 4 card digits (string) */
            Last4CardDigitsString?: string | null;
            /**
             * Format: int64
             * @description The first digits of the credit card.
             */
            FirstCardDigits?: number;
            /** @description J-parameter, type of test to perform on the card */
            JParameter?: string | null;
            /** @description Credit card Validity Month (MM) */
            CardMonth?: number;
            /** @description Credit card Validity Month (YY) */
            CardYear?: number;
            /** @description Approval Number given by the manufacturer */
            ApprovalNumber?: string | null;
            /**
             * Format: decimal
             * @description First payment amount
             */
            FirstPaymentAmount?: number;
            /**
             * Format: decimal
             * @description Amount of additional payments
             */
            ConstPaymentAmount?: number;
            /**
             * Format: int32
             * @description The number of payments for the deal.
             */
            NumberOfPayments?: number;
            /** @description the card type, from where was it manifactured. */
            CardInfo?: components["schemas"]["CardInfo"];
            /** @description card owner name */
            CardOwnerName?: string | null;
            /** @description card owner phone. */
            CardOwnerPhone?: string | null;
            /** @description the card owner email. */
            CardOwnerEmail?: string | null;
            /** @description the card holder identity number. */
            CardOwnerIdentityNumber?: string | null;
            /**
             * Format: guid
             * @description The token number, Eve, will be saved in the database.
             */
            Token?: string | null;
            /** @description Card name for information only */
            CardName?: string | null;
            /** @description Customer number at work in Rab Benteb */
            SapakMutav?: string | null;
            /** @description Unique transaction identifier If a credit/cancellation was made from the transaction, the UID will be the same as the original transaction. Otherwise, the UID will be different. */
            Uid?: string | null;
            /** @description מספר הפקדה / ריכוז */
            ConcentrationNumber?: string | null;
            /**
             * Format: int32
             * @description Document number
             */
            DocumentNumber?: number | null;
            /** @description Document DocumentType */
            DocumentType?: components["schemas"]["DocumentType"] | null;
            /** @description Identification number for credit card companies */
            Rrn?: string | null;
            /** @description the card brand, vias\ mastercard \ dinners \ americal express. */
            Brand?: components["schemas"]["Brand"];
            /** @description The transaction clearing company */
            Acquire?: components["schemas"]["Acquire"];
            /** @description Who was the card issuer? */
            Issuer?: components["schemas"]["Issuer"];
            /** @description Credit type - regular debit \ payment \ credit \ discount */
            PaymentType?: components["schemas"]["PaymentType"];
            /** @description where was the deal made? "Emv" \ "Internet" \ "Phone" */
            CardNumberEntryMode?: components["schemas"]["CardNumberEntryMode"];
            /** @description Type + Transaction Source - Cancellation \ Debit \ Direct Debit \ Credit */
            DealType?: components["schemas"]["DealType"];
            /** @description was it a refund deal? */
            IsRefund?: boolean;
            DocumentUrl?: string | null;
            /** @description The custome values that were filled and forwarded */
            CustomFields?: components["schemas"]["CustomField"][] | null;
            /** @description Is the card from abroad? */
            IsAbroadCard?: boolean;
            /** @description Issuer authorization code description */
            IssuerAuthCodeDescription?: string | null;
        };
        /** @enum {string} */
        CardInfo: "Israeli" | "NonIsraeli" | "FuelCard" | "ImmediateChargeCard" | "GiftCard";
        /** @enum {string} */
        Brand: "PrivateCard" | "MasterCard" | "Visa" | "Maestro" | "AmericanExpress" | "Isracard" | "JBC" | "Discover" | "Diners";
        /** @enum {string} */
        Acquire: "Unknown" | "Isracard" | "CAL" | "Diners" | "AmericanExpress" | "Laumicard" | "CardCom" | "PayPal" | "Upay" | "PayMe";
        /** @enum {string} */
        Issuer: "NonIsrael" | "Isracard" | "CAL" | "Diners" | "AmericanExpress" | "JCB" | "Laumicard";
        /** @enum {string} */
        PaymentType: "Unknown" | "Standard" | "SpecialCredits" | "ImmediateCharge" | "CreditClub" | "SuperCredit" | "InstallmentCredit" | "Payments" | "ClubPatments";
        /** @enum {string} */
        CardNumberEntryMode: "MagneticStip" | "SelfService" | "GasStationSelfService" | "Contactless" | "EmvContactless" | "MobileContactless" | "EmvMobileContactless" | "MobileNumber" | "Emv" | "Phone" | "SignatureOnly" | "Internet" | "Fallback" | "EmptyCandidateList";
        /** @enum {string} */
        DealType: "Information" | "Debit" | "Discharge" | "ForcedCharge" | "CashBack" | "CashTransaction" | "Recurring" | "BalanceQuery" | "Cancel" | "Refund" | "Recharge";
        /** @description Get iframe \ redirect result */
        GetLowProfileResult: {
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /** @description Api Name for authentication */
            ApiName?: string;
            /**
             * Format: guid
             * @description The unique Id of the low profile transaction
             */
            LowProfileId: string;
        };
        DtoResponseOfMuhlafimData: {
            /** Format: int32 */
            Code?: number;
            Description?: string | null;
            Content?: components["schemas"]["MuhlafimData"] | null;
        };
        MuhlafimData: {
            Data?: components["schemas"]["Data"][] | null;
        };
        Data: {
            /** Format: int64 */
            MuhlafID?: number;
            /** Format: int32 */
            EntryType?: number;
            /** Format: int32 */
            EntryNumber?: number;
            /** Format: int32 */
            SapakNumber?: number;
            OldCreditNumber?: string | null;
            NewCreditNumber?: string | null;
            /** @description Report Code ,1 - New Credit Card, 2 - Card was canceled – no new number issued, 3 - CHB, 4 - Card was canceled – no new number issued , 5 - Card Unfreeze */
            ReportCode?: components["schemas"]["ReportCodes"];
            NewCardExpirationDate?: string | null;
        };
        /** @enum {integer} */
        ReportCodes: 1 | 2 | 3 | 4 | 5;
        GetMuhlafimRequest: {
            /** @description Supplier Username */
            SupplierUserName: string;
            /** @description Secret Key or Password */
            Secret: string;
            /**
             * Format: date-time
             * @description Start Date
             */
            DateFrom: string;
            /**
             * Format: date-time
             * @description End Date
             */
            DateTo: string;
            /**
             * Format: int32
             * @description Company Identification Number
             */
            CompanyNumber: number;
            /** @description Certificate or Credential */
            Certification: string;
        };
        /** @description List of Recurring Payments */
        ExtGetRecurringPaymentRsp: {
            /**
             * Format: int32
             * @description Response code , if it equel to zero than all is OK , else error see Description
             */
            ResponseCode?: number;
            /** @description Description for errors only */
            Description?: string | null;
            /** @description Recurring Payments list */
            UpdateList?: components["schemas"]["ExtRecurringPaymentsRsp"][] | null;
        };
        /** @description Recurring Payment info */
        ExtRecurringPaymentsRsp: {
            /**
             * Format: int32
             * @description Cardcom for Recurring Id
             */
            RecurringId?: number | null;
            /** @description private description - not shown to card holder */
            InternalDecription?: string | null;
            /**
             * Format: date-time
             * @description next billing date
             */
            NextDateToBill?: string;
            /**
             * Format: int32
             * @description total num of charges to do
             */
            TotalNumOfBills?: number;
            /**
             * Format: int32
             * @description num of payments already charged
             */
            NumOfPaymentsAlreadyCharged?: number | null;
            /** @description is recurring is active and will be chanrge */
            IsActive?: boolean | null;
            /** @description the chanrge intervals, will be add to NextDateToBill (day, month , year)  */
            ChargeIntervals?: components["schemas"]["ExtTimeIntervalRsp"] | null;
            /**
             * Format: int32
             * @description currency to charge , 1- NIS , 2 - USD , else iso currency table
             */
            FinalDebitCoinId?: number;
            /** @description crate a document for the charge */
            IsDocumentCreate?: boolean | null;
            /**
             * Format: int32
             * @description the doc type that will be created , 0 for auto
             */
            DocTypeToCreate?: number | null;
            /** @description private comment - not shown to card holder */
            Comment?: string | null;
            /** @description add num of payments on the item descriptin in the document, add : (TotalNumOfBills of NumOfPaymentsAlreadyCharged ) */
            IsPrintNumOfPayments?: boolean;
            /** @description add the month of the 'NextDateToBill' to the item description */
            IsPrintBillMonth?: boolean;
            /** @description department id - for reports */
            DepartmentId?: number;
            /**
             * Format: int32
             * @description use id - that create the recurring
             */
            UserId?: number;
            /** @description custom value used for api  */
            ReturnValue?: string | null;
            /**
             * Format: int32
             * @description termianl number to charge
             */
            ChargeInTerminal?: number | null;
            /** @description amount to charge, only if IsByProducts==false  */
            FlexItem?: components["schemas"]["ExtFlexibleItemRsp"] | null;
            /** @description if true then ProdList is used to calculate cost , if flase then FlexItem is used to calculate cost  */
            IsByProducts?: boolean;
            /** @description list of prod to change , and amount will be taken for the system products table, only if IsByProducts==true  */
            ProdList?: components["schemas"]["ExtProductRsp"][] | null;
        };
        ExtTimeIntervalRsp: {
            TimeIntervalId?: number;
            /** Format: int32 */
            AddDays?: number;
            /** Format: int32 */
            AddWeeks?: number;
            /** Format: int32 */
            AddMonth?: number;
            /** Format: int32 */
            AddYears?: number;
        };
        ExtFlexibleItemRsp: {
            DocumentLineDesc?: string | null;
            /** Format: decimal */
            Price?: number;
            IsPriceIncludeVat?: boolean;
            ProductId?: string | null;
        };
        ExtProductRsp: {
            ProductId?: string | null;
            /** Format: decimal */
            Quantity?: number;
        };
        RecurringPaymentQuery: {
            /** @description API User Name */
            apiUserName?: string | null;
            /** @description API Password */
            apiPassword?: string | null;
            /** Format: int32 */
            AccountId?: number | null;
            /** Format: int32 */
            RecurringId?: number | null;
        };
        /** @description List of Recurring Payments */
        ExtGetRecurringPaymentHistoryRsp: {
            /**
             * Format: int32
             * @description Response code , if it equel to zero than all is OK , else error see Description
             */
            ResponseCode?: number;
            /** @description Description for errors only */
            Description?: string | null;
            RecurringPaymentHistory?: components["schemas"]["RecurringPaymentHistory"][] | null;
        };
        RecurringPaymentHistory: {
            /**
             * Format: int32
             * @description uniq id (per company)
             */
            RowID?: number;
            /**
             * Format: int32
             * @description Cardcom for parent Recurring Id
             */
            RecurringId?: number;
            /** Format: int32 */
            TerminalNumber?: number;
            /** Format: int32 */
            AccountID?: number;
            DocumentDescription?: string | null;
            /** Format: date-time */
            LastDate?: string | null;
            /** Format: date-time */
            OriginalNextDate?: string | null;
            /** Format: int32 */
            FinalDebitCoinID?: number;
            /**
             * Format: decimal
             * @description The sum that was Billed
             */
            SumToBill?: number;
            /** Format: decimal */
            SumToBillNoVat?: number;
            DepartmentID?: number;
            IsDocumentCreate?: boolean;
            /** Format: int32 */
            AgentID?: number | null;
            /** Format: int32 */
            PaymentNum?: number | null;
            IsReNewOrder?: boolean;
            ProductID?: string | null;
            /** Format: int64 */
            TranzactionId?: number | null;
            /** Format: int32 */
            ResposeCode?: number | null;
            /** Format: int32 */
            ProcessID?: number | null;
            DocumentType?: number | null;
            /** Format: int32 */
            DocumentNumber?: number | null;
            /** Format: decimal */
            Quantity?: number;
            /** Format: decimal */
            UnitPrice?: number;
            /** Format: decimal */
            UnitPriceNoVAT?: number;
            IsIncludesVAT?: boolean;
            /** Format: decimal */
            VAT?: number;
            /** Format: int32 */
            BillingAttempts?: number;
            /** Format: date-time */
            CreateDate?: string;
            /** @description 0 - Bank , 1 - Credit Card , 2 - Retainer */
            ActualBillingType?: number;
            /** Format: int32 */
            NumOfCreditPayments?: number | null;
            /** @description SUCCESSFUL , PENDINGFORPROCESSING , DEBTAUTOBILLING , LOSTDEBT , PAYBYOTHERE  , ONHOLD , UNKNOWN + (error Code) */
            Status?: string | null;
        };
        RecurringPaymentHistoryQuery: {
            /** @description API User Name */
            apiUserName?: string | null;
            /** @description API Password */
            apiPassword?: string | null;
            /**
             * Format: int32
             * @description RowId for history
             */
            RowId?: number | null;
            /**
             * Format: int32
             * @description AccountId for history not req if you send RowId
             */
            AccountId?: number | null;
            /** @description FromDate CreateDate , format  DDMMYYYY , req only if AccountId is sent */
            FromDate?: string | null;
            /** @description ToDate CreateDate , format DDMMYYYY , req only if AccountId is sent */
            ToDate?: string | null;
            /**
             * @description type of operation to perform
             * @default CreateDate
             */
            FilterBy: components["schemas"]["FilterBy"] | null;
        };
        /** @enum {string} */
        FilterBy: "CreateDate" | "LastUpdateDate";
        /** @description List of new Token to update */
        ExtGetListOfFilesRsp: {
            /**
             * Format: int32
             * @description Response code , if it equel to zero than all is OK , else error see Description
             */
            ResponseCode?: number;
            /** @description Description for errors only */
            Description?: string | null;
            /** @description Tokens list */
            UpdateList?: components["schemas"]["ExtUpdateTokens"][] | null;
        };
        ExtUpdateTokens: {
            /**
             * Format: int32
             * @description Prosses ID
             */
            ID?: number;
            /** @description list of update tokens */
            UpdatedTokenList?: components["schemas"]["ExUpdatTokesProsses"][] | null;
        };
        ExUpdatTokesProsses: {
            /** Format: int32 */
            ID?: number;
            /**
             * Format: int32
             * @description The row number of this work
             */
            ExcelRow?: number;
            /** @description information only , original code of the acquiring */
            OriginalStatus?: string | null;
            /**
             * Format: int32
             * @description 1- New card number , 2- the Card was canceled, there is no new Card Number , 3 - charge back , 4 - card owner ask to cancel deal
             */
            Status?: number;
            Token?: string | null;
            NewExpirationDateYYYY?: string | null;
            NewExpirationDateMM?: string | null;
            Last4Digits?: string | null;
        };
        MuhlafimByDateRequest: {
            /** @description API username */
            apiUserName: string;
            /** @description API password */
            ApiPassword?: string;
            /**
             * Format: date-time
             * @description DateTime from
             */
            fromDate: string;
            /**
             * Format: date-time
             * @description DateTime to
             */
            toDate: string;
        };
        /** @description Is Bank valid */
        ExtIsBankNumberValidRsp: {
            /**
             * Format: int32
             * @description Response code , if it equel to zero than all is OK , else error see Description
             */
            ResponseCode?: number;
            /** @description Description for errors only */
            Description?: string | null;
        };
        /** @description Is Bank valid */
        IsBankNumberValidReq: {
            /** @description API User Name */
            apiUserName?: string | null;
            /** @description API Password */
            apiPassword?: string | null;
            /**
             * Format: int32
             * @description Bank number
             */
            Bank?: number;
            /**
             * Format: int32
             * @description Snif
             */
            Snif?: number;
            /** @description Bank Account number */
            Account?: string | null;
        };
        ChangeStatusForHistoryRecurringToIrrevocableReqest: {
            /** @description API User Name */
            ApiUserName?: string | null;
            /** @description API Password */
            ApiPassword?: string | null;
            /** Format: int32 */
            RowID?: number | null;
            /** @description ProcessId value to be updated */
            ChangeTo?: components["schemas"]["RecurringStatus"];
        };
        /** @enum {string} */
        RecurringStatus: "DebtForTracking" | "NoOtherPaymentMethod" | "BadDebt";
        /** @description get account by id response */
        GetAccountByIdResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description Account inforamtion */
            Account?: components["schemas"]["Account"] | null;
        };
        /** @description Account data */
        Account: {
            /**
             * Format: int32
             * @description Unique account Id in cardcom system, account must exist in CardCom system
             */
            AccountId?: number;
            /** @description Account Company name of last name */
            Name: string;
            /** @description customer first name */
            FirstName?: string | null;
            /** @description Business registration number or user Identity number */
            TaxId?: string | null;
            /** @description Customer City */
            City?: string | null;
            /** @description Address Line 1 */
            AddressLine1?: string | null;
            /** @description Address Line 2 */
            AddressLine2?: string | null;
            /** @description Mobile phone number */
            Mobile?: string | null;
            /** @description Land line phone number */
            Phone?: string | null;
            /** @description customer email */
            Email?: string | null;
            /**
             * @description Is the client is VAT Free?
             * @default false
             */
            IsVatFree: boolean | null;
            /** @description customer zip code. */
            ZipCode?: string | null;
            /** @description mail box. */
            PoBox?: string | null;
            /** @description customer fax */
            Fax?: string | null;
            /**
             * Format: date-time
             * @description when was the customer opened in the system.
             */
            OpenDate?: string | null;
            /** @description Comments on the customer. */
            Comments?: string | null;
            /** @description The account number on a Foreign system, use for transfer to 3-party account system ( hashavshevet, SAP ) */
            AccountForeignKey?: string | null;
            /** @description Your system unique Id for this account */
            SiteUniqueId?: string | null;
            /** @description contact person name */
            ContactName?: string | null;
            /**
             * Format: int32
             * @description Default coin to use in the UI manual document creation
             * @default 0
             */
            ISOCoinId: number;
            /**
             * Format: decimal
             * @description The balance on the customer card.
             */
            Balance?: number;
            /**
             * Format: decimal
             * @description Opening balance on a customer card.
             */
            OpeningBalance?: number;
        };
        GetAccountById: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Account Id to query
             */
            AccountId: number;
        };
        GetTranzactionsResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description Tranzactions */
            Tranzactions?: components["schemas"]["TransactionInfo"][] | null;
            /** Format: int32 */
            Page?: number;
            /** Format: int32 */
            Page_size?: number;
        };
        /** @description list transactions request */
        ListTransactionsReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Date DDMMYYYY */
            FromDate: string;
            /** @description To Date DDMMYYYY */
            ToDate: string;
            /**
             * @description status of transaction to return , default - Completed
             * @default Success
             */
            TranStatus: components["schemas"]["ListTransactionStatus"];
            /**
             * Format: int32
             * @description page from 1
             */
            Page: number;
            /**
             * Format: int32
             * @description page size 10 - 2000
             */
            Page_size: number;
            /**
             * Format: int32
             * @description return only transaction for a specific terminal in this company
             */
            LimitForTerminal?: number | null;
        };
        /** @enum {string} */
        ListTransactionStatus: "Success" | "All" | "Failure";
        ExtShvaParams: {
            HaveRecipient?: boolean;
            /** Format: int32 */
            Status1?: number;
            CardNumber5?: string | null;
            Sulac25?: string | null;
            JParameter29?: string | null;
            Tokef30?: string | null;
            /** Format: int32 */
            Sum36?: number;
            SumStars52?: string | null;
            ApprovalNumber71?: string | null;
            FirstPaymentSum78?: string | null;
            ConstPayment86?: string | null;
            NumberOfPayments94?: string | null;
            AbroadCard119?: string | null;
            CardTypeCode60?: string | null;
            Mutag24?: string | null;
            CardOwnerName?: string | null;
            /** Format: guid */
            CardToken?: string | null;
            CardHolderIdentityNumber?: string | null;
            CardName?: string | null;
            CreditType63?: string | null;
            DealType61?: string | null;
            ChargType66?: string | null;
            SapakMutav?: string | null;
            /** Format: int32 */
            BinId?: number;
            /** Format: date-time */
            DealDate?: string;
            ExternalPaymentVector?: number | null;
            ExternalPaymentID?: string | null;
            CustomFields?: string[] | null;
            /** Format: int32 */
            TerminalNumber?: number;
            /** Format: int64 */
            InternalDealNumber?: number;
            CouponNumber?: string | null;
            CardOwnerPhone?: string | null;
            /** Format: int64 */
            FirstCardDigits?: number | null;
            Uid?: string | null;
        };
        /** @description Get transaction info request */
        TransactionInfoRequest: {
            /**
             * Format: int32
             * @description Terminal Number for authentication
             */
            TerminalNumber?: number;
            /** @description API Name for authentication */
            UserName: string;
            /** @description API Password for authentication */
            UserPassword: string;
            /**
             * Format: int64
             * @description InternalDealNumber to search
             */
            InternalDealNumber: number;
        };
        TransactionReq: {
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /** @description Api Name for authentication */
            ApiName?: string;
            /**
             * Format: decimal
             * @description Amount of transaction
             */
            Amount: number;
            /** @description credit Card number */
            CardNumber?: string | null;
            /**
             * Format: guid
             * @description credit Card token
             */
            Token?: string | null;
            /** @description External Merchant Id */
            ExternalMerchantId?: string | null;
            /** @description credit Card Expiration date  */
            CardExpirationMMYY?: string | null;
            /** @description credit Card CVV  */
            CVV2?: string | null;
            /** @description External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse'  */
            ExternalUniqTranId?: string | null;
            /**
             * @description External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse'
             * @default false
             */
            ExternalUniqUniqTranIdResponse: boolean | null;
            /**
             * Format: int32
             * @description Maximum number of payment to show to card holder , default 1
             * @default 1
             */
            NumOfPayments: number | null;
            CardOwnerInformation?: components["schemas"]["CardOwnerInformation"] | null;
            /**
             * Format: int32
             * @description ISO Coin Code ,1 - ILS, 2 - USD, else ISO Coin from list : https://en.wikipedia.org/wiki/ISO_4217
             * @default 1
             */
            ISOCoinId: number | null;
            /** @description Fill the value of CustomFields information */
            CustomFields?: components["schemas"]["CustomField"][] | null;
            /** @description Advanced transaction options */
            Advanced?: components["schemas"]["AdvancedTran"] | null;
            /** @description Document information , will create document if transaction succeeded */
            Document?: components["schemas"]["DocumentTran"] | null;
        };
        CardOwnerInformation: {
            Phone?: string | null;
            FullName?: string | null;
            /** @description credit card owner identity number for israel cards only */
            IdentityNumber?: string | null;
            CardOwnerEmail?: string | null;
            AvsZip?: string | null;
            AvsAddress?: string | null;
            AvsCity?: string | null;
        };
        AdvancedTran: {
            /** @description Required only if 'IsRefund' is true */
            ApiPassword?: string | null;
            /** @description Is refund transaction , 'ApiPassword' is Required to use this option */
            IsRefund?: boolean;
            /** @description ISO name (alternative and override to 'IsoCoinId'). ISO Coin Name from list : https://en.wikipedia.org/wiki/ISO_4217 */
            ISOCoinName?: string | null;
            /** @description Type of transaction for credit card in operation : CreateTokenOnly or Suspended deal, can be J2 (simple card validation) or J5 (authoriz) */
            JValidateType?: components["schemas"]["JValidateType"] | null;
            /** @description SapakMutav number, for meaged terminals */
            SapakMutav?: string | null;
            /**
             * @description Type of credit for the card, for israel cards only.
             * @default 1
             */
            CreditType: number | null;
            /** Format: int32 */
            MTI?: number | null;
            /**
             * Format: int32
             * @description Get the card number and expiretion date from account , if you need the account informatin for the invoice you need send the account Id in the document object : Document.AdvancedDefinition.AccountID and Document.AdvancedDefinition.IsLoadInfoFromAccountID=true
             */
            AccountIdToGetCardNumber?: number | null;
            /** @description capture an J5 (authoriz) request  */
            ApprovalNumber?: string | null;
            /** Format: decimal */
            FirstPayment?: number | null;
            /** Format: decimal */
            ConstPayment?: number | null;
            /** @default false */
            IsAutoRecurringPayment: boolean | null;
            /** @default false */
            IsCreateToken: boolean | null;
            /** @default false */
            SendNote: boolean | null;
        };
        DocumentTran: components["schemas"]["DocumentBase"] & {
            /** @description Manual numbering of the document. Special permission must be requested to use this parameter. */
            ManualNumber?: string | null;
            /** @description Document production date. */
            DocumentDateDDMMYYYY?: string | null;
            /** @description Document value date (for journal entries) */
            ValueDate?: string | null;
            /** @description document languge: "he" / "en" / "ru" / "ar" / "fr" / "it" */
            Languge?: string | null;
            /**
             * @description should the system send the document via SMS (only with the SMS module)
             * @default true
             */
            IsSendSMS: boolean | null;
        };
        RefundByTransactionIdResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int64
             * @description refund transaction id
             */
            NewTranzactionId?: number | null;
        };
        RefundByTransactionIdReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int64
             * @description The Id for refund
             */
            TransactionId: number;
            /** @description External deal Id (parameter shopify) */
            ExternalDealId?: string | null;
            /** @description External Merchant Id (parameter shopify) */
            ExternalMerchantId?: string | null;
            /**
             * Format: decimal
             * @description Partial Sum for refund
             */
            PartialSum?: number | null;
            /**
             * @description Cancellation only, before deposit of the transaction
             * @default false
             */
            CancelOnly: boolean | null;
            /** @description override original transaction SapalMutav value */
            SapakMutav?: string | null;
            /**
             * @description Allow Multiple Refunds on the same transaction
             * @default false
             */
            AllowMultipleRefunds: boolean | null;
            /** @description Custom Fields */
            CustomFields?: components["schemas"]["CustomField"][] | null;
        };
        SpecialTransactionsResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description SpecialTransactions */
            SpecialTransactions?: components["schemas"]["SpecialTransactionsInfo"][] | null;
        };
        SpecialTransactionsInfo: {
            /**
             * Format: date-time
             * @description row Create Date
             */
            CreateDate?: string;
            /**
             * Format: int32
             * @description Special transaction type
             */
            SpecialType?: number;
            /** @description Special transaction heb desctiption  */
            SpecialTypeDesc?: string;
            /** @description sub code for transaction type  */
            SpecialTypeSubType?: number;
            /** @description transaction type and sub type info */
            Description?: string | null;
            /**
             * Format: decimal
             * @description Amount of this transaction
             */
            Amount?: number | null;
            /**
             * Format: decimal
             * @description Original Amount transaction
             */
            OriginlTranAmount?: number | null;
            /** @description ARN is Solek transaction Id, this is the original ARN and this transaction ARN */
            ARN?: string | null;
            /** @description UID is point of sale transaction Id, this is the original UID and this transaction UID */
            UID?: string | null;
            /**
             * Format: int32
             * @description The Sapak that will get the Money
             */
            SapakNumber?: number;
            /**
             * Format: int64
             * @description CardCom point of sale Id
             */
            TranzactionId?: number | null;
            Last4CardDigits?: string | null;
            MarkedAsRead?: boolean | null;
            CurrencyISO?: number | null;
            /** Format: guid */
            CardToken?: string | null;
            /**
             * Format: date-time
             * @description Original transaction date - when the card holder did the transaction
             */
            OriginlTranDate?: string | null;
            /**
             * Format: date-time
             * @description This transaction date
             */
            SpecialTranDate?: string | null;
            /**
             * Format: int32
             * @description Mutav number in Meaged style work, information only
             */
            SapakMutavNumber?: number | null;
        };
        SpecialTransactionsReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Date DDMMYYYY */
            FromDate: string;
            /** @description To Date DDMMYYYY */
            ToDate: string;
        };
        GetExternalUniqTranIdStatusReq: {
            /**
             * Format: int32
             * @description Cardcom terminal number
             */
            TerminalNumber?: number;
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description External Uniq Tran Id , send your uniq trnasaction id to prevent duplication of transaction. if the same ExternalUniqTranId will be send you will receive and error code 608. see 'ExternalUniqUniqTranIdResponse'  */
            ExternalUniqTranId?: string | null;
            /** @description External Merchant Id */
            ExternalMerchantId?: string | null;
        };
        CreateDocumentRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description The document to be created */
            Document: components["schemas"]["Document"];
            /**
             * Format: decimal
             * @description The amount in cache
             */
            Cash?: number;
            /** @description Array of cheques */
            Cheques?: components["schemas"]["RciExtCheque"][] | null;
            /** @description Array of cheques */
            CustomFields?: components["schemas"]["RciExtCustome"][] | null;
            /** @description Array of cheques */
            DealNumbers?: components["schemas"]["RciExtDealNum"][] | null;
            /** @description Array of cheques */
            IsSendSMS?: boolean;
        };
        Document: components["schemas"]["DocumentBase"] & {
            ManualNumber?: string | null;
            DocumentDate?: string | null;
            ValueDate?: string | null;
            /**
             * Format: int32
             * @description ISOCoinID. 1=ILS, 2=USD, the rest as described in ISO. Default is 1
             */
            ISOCoinID?: number;
            /** @description ISOCoinName as described in ISO. if ISOCoinID is provided this property is not needed. */
            ISOCoinName?: string | null;
            /** @description Language. 'he' or 'en'. Default is he. When providing AccountID the account language will override this property. */
            Languge?: string | null;
            /** @description The type of the document */
            DocumentTypeToCreate: components["schemas"]["DocumentToCreate"];
        };
        RciExtCheque: {
            ChequeNumber?: string | null;
            /** Format: int32 */
            BankNumber?: number;
            /** Format: int32 */
            SnifNumber?: number;
            AccountNumber?: string | null;
            /** Format: date-time */
            DateCheque?: string;
            /** Format: decimal */
            Sum?: number;
        };
        RciExtCustome: {
            /** Format: int32 */
            TransactionID?: number;
            /** Format: date-time */
            TranDate?: string;
            Description?: string | null;
            asmacta?: string | null;
            /** Format: decimal */
            Sum?: number;
        };
        RciExtDealNum: {
            /** Format: int64 */
            DealNumber?: number;
        };
        CancelDocResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int32
             * @description New document number
             */
            NewDocumentNumber?: number | null;
            /**
             * Format: int32
             * @description New document type
             */
            NewDocumentType?: number | null;
            /**
             * Format: int32
             * @description Account ID
             */
            AccountID?: number | null;
        };
        CancelDocRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description document number to cancel
             */
            DocumentNumber: number;
            /**
             * Format: int32
             * @description document type to cancel
             */
            DocumentType: number;
            /**
             * @description Do not send the new cancell document client
             * @default false
             */
            IsCancelEmailSend: boolean;
            /**
             * @description Send sms with link to download document
             * @default false
             */
            IsSendSMS: boolean;
            /**
             * @description Do not cancel document if credit card transaction use deposit to the acquire
             * @default false
             */
            IsCreditCardCancelOnly: boolean;
        };
        /** @description send pdf documents by email */
        SendAllDocumentsToEmailResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
        };
        SendAllDocumentsToEmailRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Send to email */
            EmailTo: string;
            /** @description from date */
            FromDateYYYYMMDD: string;
            /** @description to date */
            ToDateYYYYMMDD: string;
            /**
             * @description send empty email if no documents were found
             * @default false
             */
            SendEmptyEmail: boolean | null;
            /**
             * @description add original on the document
             * @default false
             */
            ForceOriginal: boolean | null;
            /**
             * Format: int32
             * @description document type to send , null or -1 for all , else the doc id
             * @default -1
             */
            DocumentType: number | null;
        };
        DocumentSearchResponse: {
            /** Format: int32 */
            ResponseCode?: number;
            Description?: string | null;
            Documents?: components["schemas"]["InvHeadLineDto"][] | null;
            /** Format: int32 */
            Page?: number;
            /** Format: int32 */
            Count?: number;
        };
        InvHeadLineDto: {
            /** Format: decimal */
            TotalNoVatNIS?: number;
            /** Format: decimal */
            TotalIncludeVATNIS?: number;
            /** Format: decimal */
            VATOnlyNIS?: number;
            /** Format: decimal */
            TotalVatFreeNIS?: number;
            /** Format: decimal */
            TotalNoVat?: number;
            /** Format: decimal */
            TotalIncludeVAT?: number;
            /** Format: decimal */
            VATOnly?: number;
            /** Format: decimal */
            TotalVatFree?: number;
            /** Format: decimal */
            ISORate?: number;
            Cust_City?: string | null;
            Cust_Addres_Line1?: string | null;
            Cust_Addres_Line2?: string | null;
            Cust_LinePH?: string | null;
            Cust_MobilePH?: string | null;
            Comp_ID?: string | null;
            Email?: string | null;
            Cust_Name?: string | null;
            /** Format: date-time */
            InvoiceDateOnly?: string;
            /** Format: date-time */
            InvoiceDate?: string;
            /** Format: int32 */
            Invoice_Number?: number;
            /** Format: int32 */
            InvoiceType?: number;
            /** Format: int32 */
            Terminal_Number?: number;
            /** Format: int32 */
            CoinID?: number;
            /** Format: int32 */
            DepartmentID?: number;
            IsOpen?: boolean;
            /** Format: date-time */
            ValueDate?: string;
            /** Format: int32 */
            UserID?: number | null;
            /** Format: int32 */
            Customer_Number?: number | null;
            /** Format: int32 */
            group_number?: number | null;
            Languge?: string | null;
            UserComments?: string | null;
            /** Format: decimal */
            Discount?: number | null;
            /** Format: decimal */
            DiscountNIS?: number | null;
            ValidateItemsisPriceIncludeVat?: boolean | null;
            ExternalId?: string | null;
            /** Format: int32 */
            ZReport?: number | null;
            Asmachta?: string | null;
            /** Format: decimal */
            SumBeforeDiscountNIS?: number;
            /** Format: decimal */
            TotalChashNIS?: number;
            /** Format: decimal */
            TotalChequesNIS?: number;
            /** Format: decimal */
            TotalCreditCardNIS?: number;
            /** Format: decimal */
            TotalCustomeTransactionNIS?: number;
            /** Format: decimal */
            TotalRicipientNIS?: number;
            /** Format: decimal */
            TotalChash?: number;
            /** Format: decimal */
            TotalCheques?: number;
            IsNegetive?: boolean;
            /** Format: decimal */
            TotalCreditCard?: number;
            /** Format: decimal */
            TotalCustomeTransaction?: number;
            /** Format: decimal */
            TotalRicipient?: number;
        };
        DocumentSearchRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description From date */
            FromDateYYYYMMDD: string;
            /** @description To date */
            ToDateYYYYMMDD: string;
            /**
             * Format: int32
             * @description Account Id. Used to filter. Use AccountId OR CusotmerName
             */
            AccountId?: number | null;
            /** @description Customer Name. Used to filter. Use CusotmerName OR AccountId */
            CusotmerName?: string | null;
            /**
             * Format: int32
             * @description Document Type: -1=All invoices. -2=All documents. -3=Refund only
             * @default -1
             */
            DocType: number;
            /**
             * Format: int32
             * @description Coin Id. 0=All coins. 1=ILS. 2=USD
             * @default 1
             */
            CoinId: number | null;
            /**
             * Format: int32
             * @description Open or closed documents: 0=all, 1=true, 2=false.
             * @default 0
             */
            OpenClose: number;
            /**
             * @description VAT free Docs Only
             * @default false
             */
            VatFreeDocOnly: boolean;
            /**
             * Format: int32
             * @description Pagination: page number. Default 1
             * @default 1
             */
            PageNumber: number;
            /**
             * Format: int32
             * @description Pagination: number of documents per page. Default 50. Maximum 200
             * @default 50
             */
            ItemsPerPage: number;
        };
        CrossDocumentResponse: {
            /** Format: int32 */
            ResponseCode?: number;
            Description?: string | null;
        };
        /** @description the From document number */
        CrossDocumentRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description the From document number
             */
            FromDocNumber?: number;
            /**
             * Format: int32
             * @description the From document number
             */
            FromDocType?: number;
            /** @description the From document number */
            ToDocumentsList?: components["schemas"]["CrossDocumentToList"][];
        };
        /** @description sum to corss , null for full document price */
        CrossDocumentToList: {
            /** Format: int32 */
            DocNumber?: number;
            /** Format: int32 */
            DocType?: number;
            /**
             * Format: decimal
             * @description sum to corss , null for full document price
             */
            PartialSumToCorss?: number | null;
        };
        InvResponse: {
            ResponseCode?: number;
            Description?: string | null;
            /** Format: int32 */
            InvoiceNumber?: number;
            /** Format: int32 */
            InvoiceType?: number;
            /** Format: int32 */
            AccountID?: number | null;
            CardSaved?: boolean;
            EmailSendWasQueued?: boolean | null;
            InvoiceLink?: string | null;
            TaxAuthorityAllocationNumber?: string | null;
            PaymentLink?: string | null;
        };
        CreateTaxInvoiceRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Invoice Type
             */
            InvoiceType?: number;
            /** @description Invoice header */
            InvoiceHead?: components["schemas"]["InvExtHead"] | null;
            /** @description Invoice lines */
            InvoiceLines?: components["schemas"]["InvExtHeadLines"][] | null;
            /**
             * Format: decimal
             * @description Amount in cash
             */
            Cash?: number;
            /** @description Custom line */
            CustomLines?: components["schemas"]["RciExtCustome"][] | null;
            /** @description Cheques */
            Cheques?: components["schemas"]["RciExtCheque"][] | null;
            /** @description Deal Numbers */
            DealNumbers?: components["schemas"]["RciExtDealNum"][] | null;
        };
        InvExtHead: {
            CustName?: string | null;
            CustAddresLine1?: string | null;
            CustAddresLine2?: string | null;
            CustCity?: string | null;
            CustLinePH?: string | null;
            CustMobilePH?: string | null;
            CompID?: string | null;
            Language?: string | null;
            Languge?: string | null;
            Comments?: string | null;
            /** Format: int32 */
            CoinID?: number;
            CoinIsoName?: string | null;
            Email?: string | null;
            SendByEmail?: boolean;
            ExtIsVatFree?: boolean | null;
            ManualInvoiceNumber?: string | null;
            DepartmentId?: string | null;
            DepartmentIdShort?: number;
            IsLoadInfoFromAccountID?: string | null;
            IsAutoCreateUpdateAccount?: string | null;
            AccountForeignKey?: string | null;
            SiteUniqueId?: string | null;
            DeliveryName?: string | null;
            InvDate?: string | null;
            ValueDate?: string | null;
            ExternalId?: string | null;
            AccountID?: string | null;
        };
        InvExtHeadLines: {
            Description?: string | null;
            /** Format: decimal */
            Quantity?: number;
            IsPriceIncludeVAT?: boolean;
            IsVatFree?: string | null;
            /** Format: decimal */
            Price?: number;
            ProductID?: string | null;
            TotalLineCost?: string | null;
        };
        GetDocumentUrlResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description URL to the requested document */
            DocUrl?: string | null;
        };
        GetDocumentRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Document Type. Note "Auto" type is not acceptable in this method. */
            DocumentType: components["schemas"]["DocumentToCreate"];
            /**
             * Format: int32
             * @description Document Number
             */
            DocumentNumber: number;
        };
        RSContent: components["schemas"]["ErrorInfo"] & {
            DocumentsErrorResults?: components["schemas"]["CompanyOperationsError"][] | null;
            KycErrorResults?: components["schemas"]["CompanyOperationsError"][] | null;
            CompanyErrorResults?: components["schemas"]["CompanyOperationsError"][] | null;
            UserErrorResults?: components["schemas"]["CompanyOperationsError"][] | null;
            /** Format: guid */
            CompanyInternalID?: string | null;
            /** Format: int32 */
            TerminalNumber?: number | null;
            APIUserName?: string | null;
            APISecret?: string | null;
            ModulesList?: string[] | null;
            Request?: components["schemas"]["HttpStatusCode"];
            IsDone?: boolean;
        };
        CompanyOperationsError: {
            PropertyName?: string | null;
            Response?: string | null;
        };
        /** @enum {integer} */
        HttpStatusCode: 100 | 101 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 300 | 300 | 301 | 301 | 302 | 302 | 303 | 303 | 304 | 305 | 306 | 307 | 307 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 426 | 500 | 501 | 502 | 503 | 504 | 505;
        OpenNewCompanyResponse: components["schemas"]["OpenNewCompanyResp"] & {
            CardComSapakNumber?: string | null;
            /** Format: int32 */
            CompanyNumber?: number;
        };
        OpenNewCompanyResp: {
            /** Format: int32 */
            ResponseCode?: number;
            Description?: string | null;
            /** Format: guid */
            CompanyInternalID?: string | null;
            /** Format: int32 */
            TerminalNumber?: number | null;
            APIUserName?: string | null;
            APISecret?: string | null;
            ModulesList?: string[] | null;
            UpayAPIKey?: string | null;
            ShowErrorToEndUser?: boolean;
            CardComSapakNumber?: string | null;
        };
        AcquiredCompanyAccountFileUpload: {
            /** @description Document for upload */
            DocumentsInfo?: components["schemas"]["DocumentsInfo"][] | null;
            /** @description SupplierUserName */
            SupplierUserName: string;
            /** @description SupplierPassword */
            SupplierPassword: string;
            /** @description Secret */
            Secret: string;
            /**
             * Format: guid
             * @description CompanyInternalID
             */
            CompanyInternalID: string;
        };
        DocumentsInfo: {
            /** @description Document Type */
            DocType: components["schemas"]["DocType"];
            /** @description Name */
            Name: string;
            /**
             * Format: byte
             * @description Content
             */
            Content: string;
        };
        /** @enum {string} */
        DocType: "Id" | "Passport" | "CertificateOfIncorporation" | "BankConfirmationOrPhotocopyOfCheck" | "AttorneysApprovalForAGovernmentCompany" | "AuthorizedAsAuthorizedToSign" | "AttorneysProtocolAuthorizedToSign" | "BookkeepingAuthorization" | "AnotherCertificateForAForeignResident" | "LicenseWorkPermitCertificateForABusiness" | "DeclarationOfBeneficiaries" | "ADocumentIndicatingTheCorrectAddressOfTheCompany" | "FaceToFaceRecognitionVideoFile";
        AcquiredCompanyAccountWithDocuments: {
            /** @description Document object */
            DocumentsInfos?: components["schemas"]["DocumentsInfo"][] | null;
            /** @description General info object */
            AcquiredCompanyAccount?: components["schemas"]["AcquiredCompanyAccount"] | null;
        };
        AcquiredCompanyAccount: {
            /** @description SupplierUserName */
            SupplierUserName: string;
            /** @description SupplierPassword */
            SupplierPassword: string;
            /** @description Secret */
            Secret: string;
            /** @description Company info */
            CompanyInfo?: components["schemas"]["CompanyInfo"] | null;
            /** @description User info */
            UserInfo?: components["schemas"]["UserInfo"] | null;
            /** @description Terminal info */
            TerminalInfo?: components["schemas"]["TerminalInfo"] | null;
            /** @description Kyc info */
            KycInfo?: components["schemas"]["KycInfo"] | null;
        };
        CompanyInfo: {
            /** @description Business Activity */
            Activity?: string | null;
            /** @description Id Business Number */
            BusinessRegistrationNumber: string;
            /** @description Contact Name */
            ContactPerson?: string | null;
            /** @description Company email */
            Email?: string | null;
            /** @description Company name mandatory field */
            Name: string;
            /** @description Fax */
            Fax?: string | null;
            /** @description Phone - mandatory if there is no mobile phone */
            PhoneNumber?: string | null;
            /** @description Mobile phone - mandatory if there is no phone number */
            MobilePhone?: string | null;
            /** @description Zip code */
            ZipCode?: string | null;
            /** @description Is vat free company (N.P.O) */
            IsVatFreeCompany?: boolean;
            /** @default Israel */
            Citizenship: components["schemas"]["Citizenship"];
            /** Format: guid */
            CompanyInternalID?: string | null;
            /**
             * Business name in English
             * @description Business name in English
             */
            NameEng?: string | null;
            /**
             * City code
             * Format: int32
             * @description City code - get list of cities from https://secure.cardcom.solutions/CompanyOperations/GetCities
             */
            CityCode?: number | null;
            /**
             * Street code
             * Format: int32
             * @description Street code - get list of streets from https://secure.cardcom.solutions/CompanyOperations/GetStreets by city code
             */
            StreetCode?: number | null;
            /**
             * House number
             * @description House number
             */
            HouseNumber?: string | null;
            /**
             * Website Address
             * @description Website Address
             */
            WebSiteUrl?: string | null;
            /**
             * Entrance
             * @description Entrance
             */
            Entrance?: string | null;
            /**
             * Country
             * Format: int32
             * @description Country - get list of Countries from https://secure.cardcom.solutions/CompanyOperations/GetCountries  for example israel code 376"
             */
            CountryCode?: number;
            /**
             * Name legal corporation
             * @description Name legal corporation
             */
            NameLegalCorporation?: string | null;
            /**
             * agreement number
             * @description agreement number
             */
            AgreementInfo?: components["schemas"]["ExtSlikaAggrement"] | null;
        };
        /** @enum {string} */
        Citizenship: "Unknown" | "Israel" | "Expatriate" | "ResidentArea";
        ExtSlikaAggrement: {
            /**
             * agreement Id
             * Format: int32
             * @description agreement Id
             */
            AgreementId?: number;
        };
        UserInfo: {
            /**
             * Format: int32
             * @description Street code - get list of streets from https://secure.cardcom.solutions/CompanyOperations/GetStreets by city code
             */
            StreetCode?: number;
            /**
             * Format: int32
             * @description City code - get list of cities from https://secure.cardcom.solutions/CompanyOperations/GetCities
             */
            CityCode?: number;
            /** @description Email */
            Email?: string | null;
            /** @description Identity number */
            IdentityNumber: string;
            LogInName: string;
            LogInPassword?: string | null;
            /** @description First Name */
            FirstName?: string | null;
            /** @description Fax */
            Fax?: string | null;
            /** @description Phone number */
            PhoneNumber?: string | null;
            /** @description Mobile phone */
            MobilePhone?: string | null;
            /** @description Zip code */
            ZipCode?: string | null;
            /**
             * Last Name
             * @description Last Name
             */
            LastName?: string | null;
            /**
             * Birth date
             * @description Birth Date yyyy-MM-dd, Must be older than 18
             */
            BirthDate?: string | null;
            /**
             * Sex
             * @description Sex
             */
            Gender?: components["schemas"]["Gender"] | null;
            /**
             * Issue date of identity or passport yyyy-MM-dd
             * @description Issue date of identity or passport yyyy-MM-dd
             */
            IdentityIssueDate?: string | null;
            /**
             * Passport Issue Country Code
             * Format: int32
             * @description Passport Issue Country Code - get from API http://localhost:61240/CompanyOperations/GetCountries
             */
            PassportIssueCountryCode?: number;
            /**
             * ID type, passports or IssueDate
             * @description IdIssueDateOrPassportIDTypes
             */
            IdIssueDateOrPassportIDTypes?: components["schemas"]["HumanIDTypes"] | null;
            /** @description Personal identification code */
            PersonalIdentificationCode?: string | null;
        };
        /** @enum {string} */
        Gender: "Unknown" | "male" | "female";
        /** @enum {string} */
        HumanIDTypes: "IDNumber" | "Passport";
        TerminalInfo: {
            /** @description Bank code - get list of banks from https://secure.cardcom.solutions/CompanyOperations/GetBanks */
            BankCode?: string | null;
            /** @description Bank branch code -  - get list of bank branches from https://secure.cardcom.solutions/CompanyOperations/GetBanksBranches by bank number */
            BankBranchCode?: string | null;
            /** @description Bank account number */
            BankAccountNumber?: string | null;
            ModuleList?: components["schemas"]["ModuleType"][] | null;
        };
        ModuleType: {
            ModuleID?: string | null;
        };
        KycInfo: {
            /** @description פרמטרים שמתאימים לכל */
            KycInfoGeneric?: components["schemas"]["KycInfoGeneric"] | null;
            /** @description פרמטרים שמתאימים לעוסק מורשה */
            KycInfoOsekMurshe?: components["schemas"]["KycInfoOsekMurshe"] | null;
        };
        KycInfoGeneric: {
            /** @description טקסט חופשי עד 250 תווים, עבור איזה מדינות המוצר מיועד */
            CountriesTargetedMarket?: string | null;
            /** @description טקסט חופשי עד 250 תווים, רשימת העסקים הקשורים – המשך לשדה הקודם במידה וסימנו בו TRUE */
            NamesOfRelatedBusinesses?: string | null;
            /**
             * Format: decimal
             * @description אחוז עיסקאות צפוי של תשלום אחד
             */
            ExpectedPercentagePaymentOfOnePayment?: number | null;
            /**
             * Format: decimal
             * @description אחוז עיסקאות צפוי של עיסקאות תשלומים
             */
            ExpectedPercentageOfPaymentTransactions?: number | null;
            /**
             * Format: decimal
             * @description אחוז עיסקאות צפוי של תשלומי קרדיט
             */
            ExpectedPercentageOfCreditPaymentTransactions?: number | null;
            /**
             * Format: decimal
             * @description אחוז עיסקאות צפוי של עיסקאות תייר
             */
            ExpectedPercentageOfTouristTransactions?: number | null;
            /** @description הצפי לעיסקה ממוצעת מבחינת מספר תשלומים. שדה שמקבל מספר שלם */
            ExpectedPaymentNumberForAverageTransaction?: number | null;
            /** @description באיזה פלטפורמה המכירה צפויה להתבצע - לא בשימוש
             *     שדה שמקבל מספר שלם
             *      */
            SalePlatform?: components["schemas"]["SalePlatform"] | null;
            /** @description באיזה פלטפורמה המכירה צפויה להתבצע - לא בשימוש
             *     שדה שמקבל מספר שלם
             *      */
            SalePlatforms?: components["schemas"]["SalePlatform2"][] | null;
            /** @description ריכוז חיובים של ספקים אחרים – האם הלקוח הוא לקוח מאגד */
            IsPaymentsFacilitator?: boolean | null;
            /** @description האם הלקוח מאפשר משיכת מזומן בקופה? */
            IsBusinessFacilitateCashWithdrawls?: boolean | null;
            /** @description האם הלקוח מאפשר מכירת שוברים/כרטיסים נטענים/כרטיסי מתנה? */
            IsBusinessFacilitateVoucherOrRechargingCardsSales?: boolean | null;
            /** @description האם הלקוח נותן אשראי שלא למטרת קנייה בחנות? */
            IsBusinessFacilitateCreditForTransactionsOutsideBusinessScope?: boolean | null;
            /** @description הצבת קופות בבתי עסק אחרים? */
            IsBusinessPlaceCashRegistersInOtherBusinesses?: boolean | null;
            /** @description מה הוא סוג השירות המתוכנן? */
            TypeOfPlannedService?: string | null;
            /**
             * Format: int32
             * @description מהו הסכום המינימלי לעיסקה בכרטיס אשראי?
             */
            MinimumAmountOfCreditTransaction?: number | null;
            /**
             * Format: int32
             * @description מהו הסכום המקסימלי לעיסקה בכרטיס אשראי?
             */
            MaximumAmountOfCreditTransaction?: number | null;
            /** @description האם העסק בעיקר פועל בעונה מסויימת של השנה? */
            IsTheBusinessSeasonal?: boolean | null;
            /** @description האם העסק סלק בעבר כרטיסי אשראי ? */
            IsTheBusinessPreviouslyClearedCreditCards?: boolean | null;
            /** @description כמה שנות ניסיון יש לעסק בתחום הסליקה? */
            NumberOfYearsBusinessHasInClrearance?: number | null;
            /** @description משך זמן האספקה הצפוי למוצרי החנות? */
            ExpectedStoreSupplyDeliverySchedule?: components["schemas"]["ExpectedStoreSupplyDeliverySchedule"] | null;
            /** @description משך זמן האספקה הצפוי למשלוח? */
            TimeTillProductShips?: number | null;
            /**
             * Format: int32
             * @description מהו הסכום הממוצע לעיסקה בכרטיס אשראי?
             */
            AvarageTransactionAmountInCreditCard?: number | null;
            /**
             * Format: int32
             * @description מספר עסקאות חודשי משוער
             */
            EstimatedMonthlyTransactionAmount?: number | null;
            /** @description האם בית עסק סורב בעבר לפעילות אל מול תאגיד בנקאי */
            IsBusinessBeenDeniedActionVersusBankingCorporation?: boolean | null;
            /**
             * Format: int32
             * @description תחום עיסוק כללי
             */
            GeneralBusinessFieldMccCode?: number | null;
            /**
             * Format: int32
             * @description תחום עיסוק מפורט
             */
            SpecifiedBusinessFieldMccCode?: number | null;
            /** @description דרך הגיוס */
            TypeOfRecruitment?: components["schemas"]["TypeOfRecruitment"] | null;
        };
        /** @enum {string} */
        SalePlatform: "PhysicalSale" | "Phone" | "Web" | "LandingPage";
        /** @enum {integer} */
        SalePlatform2: 0 | 1 | 2 | 3;
        /** @enum {string} */
        ExpectedStoreSupplyDeliverySchedule: "Immediate" | "Late" | "Continuous";
        /** @enum {string} */
        TypeOfRecruitment: "Independent" | "Telephone" | "UsingARemoteRepresentative";
        KycInfoOsekMurshe: {
            /** @description האם כתובת המגורים של הבעלים שונה מכתובת העסק */
            IsOwnerAddressDifferentFromBusinessAddress?: boolean | null;
            /** @description מספר הבית בכתובת המגורים של בעל בית העסק */
            BusinessOwnerHomeNumber?: string | null;
            /** @description כניסה בכתובת המגורים של בעל בית העסק */
            BusinessOwnerEntranceNumber?: string | null;
            /**
             * Format: int32
             * @description קוד רחוב בכתובת המגורים של בעל בית העסק
             */
            BusinessOwnerStreetCode?: number | null;
            /**
             * Format: int32
             * @description קוד עיר בכתובת המגורים של בעל בית העסק
             */
            BusinessOwnerCityCode?: number | null;
            /** @description מיקוד בכתובת המגורים של בעל בית העסק */
            BusinessOwnerZipCode?: string | null;
            /** @description שם משפחה של האם לפני הנישואין */
            MotherMaidenName?: string | null;
        };
        DataGov_CityCodes: {
            /** Format: int64 */
            Id?: number;
            /** Format: int32 */
            CodeCity?: number | null;
            City?: string | null;
            CityEng?: string | null;
        };
        DataGov_StreetCodes: {
            /** Format: int64 */
            Id?: number;
            /** Format: int32 */
            CodeStreet?: number | null;
            Street?: string | null;
            /** Format: int32 */
            CityCode?: number | null;
            StreetEng?: string | null;
        };
        CountriesISO: {
            CountryCode?: string | null;
            Name?: string | null;
            NameHeb?: string | null;
            Alpha_2?: string | null;
            Alpha_3?: string | null;
            Iso_3166_2?: string | null;
            Region?: string | null;
            SubRegion?: string | null;
            IntermediateRegion?: string | null;
            RegionCode?: string | null;
            SubRegionCode?: string | null;
            IntermediateRegionCode?: string | null;
            BDI_CountryCode?: string | null;
        };
        Banks: {
            /** Format: int32 */
            Bank_Code?: number;
            Bank_Name?: string | null;
            IsMasavDigitalVerificationSupported?: boolean;
            BanksBranches?: components["schemas"]["BanksBranches"][] | null;
        };
        BanksBranches: {
            /** Format: int32 */
            Bank_Code?: number;
            /** Format: int32 */
            Branch_Code?: number;
            Branch_Name?: string | null;
            Branch_Address?: string | null;
            Banks?: components["schemas"]["Banks"] | null;
        };
        MCC_DBs_MAIN: {
            MCC_Code_MainClassification?: number;
            MCC_Description_MainClassification?: string | null;
        };
        MCC_DBs: {
            /** Format: int32 */
            MCC_CardCom?: number;
            MCC_Code_Local?: number;
            MCC_Code_Master?: number;
            MCC_Code_Visa?: number;
            MCC_Description?: string | null;
            MCC_Code_MainClassification?: number;
            MCC_Description_MainClassification?: string | null;
            PriorApprovalForRecruitingABusinessRiskManagement?: boolean;
            /** Format: int32 */
            RecruitmentRouteType?: number;
            ATouristMissingDocument?: boolean;
            MissingDocumentStatusDefault?: boolean;
            RiskLevel?: number;
        };
        OpenMeagedResponse: {
            /** @description SapakNumber stats */
            SapakStatus?: components["schemas"]["SapakStatus"];
            /**
             * Format: int32
             * @description Sapak Number for compoany
             */
            SapakNumber?: number | null;
            /** @description Developer Error See InputErrorDescription for information, do not show this to the end user */
            IsDevError?: boolean;
            /** @description Is one of the input values is invalid */
            IsInputError?: boolean;
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description for the developer to know what porp is invalid  */
            InputErrorPropName?: string | null;
        };
        /** @enum {string} */
        SapakStatus: "UnderTest" | "InProcess" | "Approved" | "Blocked" | "Error";
        MeagedOpenRequest: {
            /** @description Do only validation for the recquest and do not open a new company! for Dev-test only */
            IsValidationOnly: boolean;
            /** @description Supplier User Name */
            SupplierUserName: string;
            /** @description Supplier Secret */
            Secret: string;
            CompnayInfo: components["schemas"]["MeagedCompanyInfo"];
            PeopleInfo: components["schemas"]["MeagedPeopleInfo"][];
            KycInfo: components["schemas"]["MeagedKycInfo"];
        };
        MeagedCompanyInfo: {
            /** Format: int64 */
            BusinessRegistrationNumber: number;
            /** @description Legal Corporation name */
            NameLegalCorporation: string;
            /** @description Legal Corporation name in english */
            NameLegalCorporationEng: string;
            Email: string;
            /** @description Company name that will show to the card hulder (if different from Leagal Name) */
            AdvertisingSapakName?: string | null;
            /** @description Company name that will show to the card hulder (if different from Leagal Name) in english */
            AdvertisingSapakEngName?: string | null;
            PhoneNumber1: string;
            PhoneNumber2?: string | null;
            ZipCode: string;
            /** Format: int32 */
            CityCode: number;
            /** Format: int32 */
            StreetCode: number;
            HouseNumber?: string | null;
        };
        MeagedPeopleInfo: {
            RelationType: components["schemas"]["Relations"];
            /** Format: int32 */
            IdentityNumber: number;
            IdentityIssueDate_DDMMYYYY: string;
            IdentityExpireDate_DDMMYYYY: string;
            BirthDate_DDMMYYYY: string;
            /** @description 1 - male , 2 - female */
            Gender: components["schemas"]["Gender2"];
            FirstName: string;
            LastName: string;
            ResedentialCountryCode?: string | null;
            /** Format: int32 */
            StreetCode: number;
            /** Format: int32 */
            CityCode: number;
            ZipCode?: string | null;
            HouseNumber?: string | null;
            PhoneNumber1: string;
            PhoneNumber2?: string | null;
            Fax?: string | null;
            Email?: string | null;
        };
        /** @enum {string} */
        Relations: "AuthorizedSignature" | "AuthorizedSignatureForeignResident";
        /** @enum {integer} */
        Gender2: 0 | 1 | 2;
        MeagedKycInfo: {
            /**
             * Format: int32
             * @description MCC_CardCom
             */
            Mcc: number;
            /** Format: decimal */
            MaxNumberOfPayments: number;
            ElectronicCommerceUrl?: string[] | null;
        };
        SapakStatusChangeNotify: {
            /** Format: int32 */
            SapakNumber?: number;
            SapakStatus?: components["schemas"]["SapakStatus"];
        };
        MeagedGetCompanyInfoResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            MeagedSapakInfo?: components["schemas"]["MeagedSapakInfo"][] | null;
        };
        MeagedSapakInfo: {
            /** Format: int32 */
            SapakNumber?: number;
            SapakStatus?: components["schemas"]["SapakStatus"];
        };
        MeagedGetCompanyInfoReuqest: {
            /** @description Supplier User Name */
            SupplierUserName: string;
            /** @description Supplier Secret */
            Secret: string;
            /** Format: int64 */
            BusinessRegistrationNumber?: number | null;
            /** Format: int32 */
            SapakNumber?: number | null;
        };
        CreditCardTransactionsResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int32
             * @description page, from 1
             */
            Page: number;
            /**
             * Format: int32
             * @description page size, 10 - 2000
             */
            Page_size: number;
            CreditCardTransactions?: components["schemas"]["CreditCardTransaction"][] | null;
        };
        CreditCardTransaction: {
            /** Format: date-time */
            CreateDate?: string;
            /** Format: int64 */
            Id?: number;
            /**
             * Format: int32
             * @description The Sapak that will get the Money
             */
            SapakNumber?: number | null;
            ARN?: string | null;
            /** Format: date-time */
            TransacDate?: string;
            /** Format: duration */
            TransacTime?: string;
            /** Format: date-time */
            TransmissionDate?: string;
            /** Format: duration */
            TransmissionTime?: string;
            TranType?: components["schemas"]["TranType"];
            Rrn?: string | null;
            /** Format: decimal */
            Amount?: number;
            /** Format: decimal */
            FirstPayment?: number;
            /** Format: decimal */
            NotFirstPayment?: number;
            /** Format: int32 */
            NoPayments?: number;
            IndexPayment?: number;
            /** Format: date-time */
            Agg_PayDay?: string;
            /** Format: decimal */
            Agg_IfPac?: number;
            ActionCode?: components["schemas"]["ActionCode"];
            Last4Digits?: number | null;
            /** @description String representation of Last4Digits. Prevents zeros from being omitted. */
            Last4DigitsStr?: string | null;
            /** Format: int32 */
            First7Digits?: number | null;
            Uid?: string | null;
            Mti?: components["schemas"]["MTI"];
            /** Format: int32 */
            SessionNumber?: number;
            CouponNumber?: string | null;
            AuthorizeNo?: string | null;
            /** Format: int32 */
            Retailer?: number;
            Brand?: components["schemas"]["Brand2"];
            /** Format: decimal */
            Agg_IfPctFixAmt?: number;
            OriginCurrency?: number;
            PaymentCurrency?: number;
            /**
             * Format: int32
             * @description Mutav number in Meaged style work, information only
             */
            SapakMutavNumber?: number;
            /** @description Secure transaction indicator */
            Eci?: components["schemas"]["EciType"];
        };
        /** @enum {string} */
        TranType: "Info_0" | "Charge_1" | "Prika_2" | "Meulachet_3" | "Cashback_6" | "Cash_7" | "DirectDebite_11" | "ManualCashDisbursement_12" | "Yitra_30" | "Refund_53" | "Recharge_55";
        /** @enum {string} */
        ActionCode: "NoActionCode" | "Purchase_1" | "Return_6" | "FeeCharge_10" | "CloseTXNReturn_11" | "CHB_15" | "CHBNoMerchandis_19" | "FeeChargeReturn_20" | "CloseTXN_21" | "HOLD_24" | "Cancel_25" | "RevCHB_35" | "Rep_45" | "OriginalRequest_51" | "CopyRequest_52" | "CHB2_65" | "CHB2NoMerchandi_69" | "RevCHB2_75" | "BlockedCard_90" | "NEW_ISSUER_NOTIFY_ISSUANCE_CARD_91" | "OLD_ISSUER_RESPONSE_FOR_NOTIFY_92" | "FRAUD_93" | "CANCEL_STANDING_ORDER_94" | "CHANGE_CARD_STANDING_ORDER_95" | "ISSUER_CANCEL_STANDING_ORDER_96" | "RESUME_CARD_97" | "CHANGE_NOT_ACTIVATED_CARD_98" | "CBH_SECOND_FULL_205" | "CBH_SECOND_PARTIAL_282" | "CBH_FIRST_FULL_450" | "CBH_FIRST_FULL_451" | "CBH_FIRST_PARTIAL_453" | "CBH_FIRST_PARTIAL_454" | "PrePayment_1001" | "PrePaymentFutureDebts_1002" | "CHBCommition_1003" | "CancelMTI520Commition_1004" | "RefundAC6Commition_1005" | "NotUsedRefundsSum_2001" | "GetMoneyFromMerchant_2002" | "FixVat_2003" | "InternalTransactionRecalc_9001";
        /** @enum {string} */
        MTI: "Request_100" | "RequestRepeat_101" | "ResponseToRequest_110" | "RequestCancel_400" | "ResponseToRequestCancel_410" | "RequestReversal" | "ResponseToRequestReversal_430" | "CreditCardCharge_500" | "CreditRefund_520" | "Info_540" | "RequestNetwork_800" | "ResponseNetwork_810";
        /** @enum {string} */
        Brand2: "MasterCard_1" | "Visa_2" | "Diners_3" | "Amex_4" | "Isracard_5";
        /** @enum {string} */
        EciType: "Empty" | "NoCavvUcaf" | "CavvUcafNotIssuer" | "CavvUcaf";
        CreditCardTransactionsReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Create Date DDMMYYYY */
            FromCreateDate: string;
            /** @description To Create Date DDMMYYYY */
            ToCreateDate: string;
            /**
             * Format: int32
             * @description page,  from 1
             */
            Page: number;
            /**
             * Format: int32
             * @description page size, 10 - 2000
             */
            Page_size: number;
        };
        CreditCardTransactionsHaltedResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            CreditCardTransactions?: components["schemas"]["CreditCardTransaction"][] | null;
        };
        CreditCardTransactionsHaltedReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
        };
        FinancialTransactionsResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** Format: int32 */
            Page?: number;
            /** Format: int32 */
            Page_size?: number;
            /** @description Financial Transactions */
            FinancialTransactions?: components["schemas"]["FinancialTransactions"][] | null;
        };
        FinancialTransactions: {
            /** Format: date-time */
            CreateDate?: string;
            /** Format: int32 */
            FirstCardDigits?: number | null;
            /** Format: int64 */
            Id?: number;
            /** @description ARN is Solek transaction Id, this is the original ARN and this transaction ARN */
            ARN?: string | null;
            /**
             * Format: int32
             * @description The Sapak that will get the Money
             */
            SapakNumber?: number;
            /**
             * Format: decimal
             * @description The Sapak that will get the Money
             */
            OrigTransactionAmount?: number;
            /** Format: int32 */
            BankDepositesId?: number | null;
            /** Format: date-time */
            BankDepositAt?: string | null;
            /** Format: int64 */
            CreditCardTransactionsId?: number;
            /**
             * Format: int32
             * @description מספר הפקדה / ריכוז
             */
            ConcentrationNumber?: number;
            /** @description bank deposit currency */
            DepositeCurrency?: number;
            /** @description מספר הפקדה / ריכוז */
            ActionCode?: number;
            /** @description CreditCard original transactions currency */
            CreditCardCurrency?: number;
            /**
             * Format: decimal
             * @description Amount for Bank Deposite
             */
            DepositeAmount?: number;
            /**
             * Format: decimal
             * @description Interchange Fee in percentage
             */
            IfPct?: number;
            /**
             * Format: decimal
             * @description fee per transaction, in transaction currency
             */
            FeePerTrnAmt?: number;
            /**
             * Format: decimal
             * @description per transaction fix commission in Deposite currency
             */
            FixFeeAmtDepoCurr?: number;
            /**
             * Format: decimal
             * @description clube management commission percentage
             */
            MngtFeePct?: number;
            /**
             * Format: decimal
             * @description סכום העסקה או סכום התשלום הרלונטי מטבע עסקה
             */
            BrutoOrgCurAmt?: number;
            /**
             * Format: decimal
             * @description הנחת סולק היחסית לתשלום הרלונטי מטבע עסקה
             */
            DiscOrigCurrAmt?: number;
            /**
             * Format: decimal
             * @description הנחת מועדון היחסית לתשלום הרלונטי מטבע עסקה
             */
            ClDscOrgCurAmt?: number;
            /**
             * Format: decimal
             * @description סכום הנחה תמורת נקודות/כוכבים
             */
            DiscFreqShopAmt?: number;
            /**
             * Format: decimal
             * @description Amount after discounts for calculation
             */
            AftDiscAmtDepoCur?: number;
            /**
             * Format: decimal
             * @description fee in deposit currency
             */
            IfAmtDepoCur?: number;
            /**
             * Format: decimal
             * @description VAT percentage for this transaction
             */
            VatPrc?: number;
            /**
             * Format: decimal
             * @description VAT in deposit currency
             */
            VatIfNisDepoCur?: number;
            /**
             * Format: decimal
             * @description base rate of index or Currency rate used in this transaction
             */
            CurrencyOrIndexRate?: number;
            /**
             * Format: decimal
             * @description base rate of index or Currency rate used in this transaction
             */
            EffectiveCurrencyOrIndexRate?: number;
            /**
             * Format: date-time
             * @description Estimate Deposite Date
             */
            EstimateDepositeDate?: string | null;
            /** @description Estimate Deposite Date */
            NoOfPmt?: number;
            /** @description this payment number  */
            PmtNo?: number;
            Brand?: components["schemas"]["Brand2"];
            /** @description Txn type  */
            TxnType?: components["schemas"]["TXNType"];
            /** @description linked transactions type */
            IndexLinkType?: components["schemas"]["LinkedTransactionsType"];
            /**
             * Format: date-time
             * @description linked transactions type
             */
            PurchaseDate?: string;
            UID?: string | null;
            Last4CardDigits?: number | null;
            /** @description String representation of Last4CardDigits. Prevents zeros from being omitted */
            Last4CardDigitsStr?: string | null;
            /**
             * Format: int32
             * @description Mutav number in Meaged style work, information only
             */
            SapakMutavNumber?: number | null;
        };
        /** @enum {integer} */
        TXNType: 1 | 2 | 3 | 6 | 7 | 8 | 12 | 17 | 71 | 78;
        /** @enum {integer} */
        LinkedTransactionsType: 1 | 4 | 8;
        FinancialTransactionsReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Create Date DDMMYYYY */
            FromCreateDate?: string | null;
            /** @description To Create Date DDMMYYYY */
            ToCreateDate?: string | null;
            /** @description Will return transaction that have bean depisited in the fron to dates */
            AddDepositedTransaction?: boolean | null;
            /**
             * Format: int32
             * @description page,  from 1
             */
            Page: number;
            /**
             * Format: int32
             * @description BankDepositeId
             */
            BankDepositeId?: number;
            /**
             * Format: int32
             * @description page size, 10 - 2000
             */
            Page_size: number;
        };
        BankDepositesResp: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /** @description BankDeposites */
            BankDeposites?: components["schemas"]["BankDeposites"][] | null;
        };
        BankDeposites: {
            /**
             * Format: int32
             * @description uniq deposite id
             */
            Id?: number;
            /**
             * Format: date-time
             * @description Deposite date
             */
            DepositeAt?: string;
            /**
             * Format: int32
             * @description Sapak Number
             */
            SapakNumber?: number;
            /**
             * Format: decimal
             * @description Deposite amount
             */
            Amount?: number;
            /**
             * Format: int32
             * @description Israel bank Number
             */
            BankNumber?: number;
            /**
             * Format: int32
             * @description Israel Branch Number
             */
            BranchNumber?: number;
            /**
             * Format: int32
             * @description Israel Account number
             */
            AccountNumber?: number;
            /**
             * Format: int32
             * @description deposit currency
             */
            Currency?: number;
        };
        BankDepositesReq: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Create Date DDMMYYYY */
            FromCreateDate: string;
            /** @description To Create Date DDMMYYYY */
            ToCreateDate: string;
        };
        SlikaInvoicesResponse: {
            /**
             * Format: int32
             * @description if equel zero then success , else , a develper error see Description for more info
             */
            ResponseCode?: number;
            /** @description Description of the ResponseCode */
            Description?: string | null;
            /**
             * Format: int32
             * @description Total count of documents
             */
            TotalCount?: number;
            /** @description Query result */
            Invoices?: components["schemas"]["SlikaInvoicesResult"][] | null;
        };
        SlikaInvoicesResult: {
            /**
             * Format: int64
             * @description Document Number
             */
            DocNumber?: number;
            /**
             * Format: int32
             * @description Document type. 1 = Tax invoice
             */
            DocType?: number;
            /**
             * Format: date-time
             * @description Date of the document
             */
            DocDate?: string;
            /**
             * Format: decimal
             * @description Original transaction amount
             */
            BrutoOrgCurAmt?: number;
            /**
             * Format: decimal
             * @description Club discounts
             */
            DiscOrigCurrAmt?: number;
            /**
             * Format: decimal
             * @description Transaction amount after club discounts
             */
            AftDiscNisAmt?: number;
            /**
             * Format: decimal
             * @description Interchange fee amount
             */
            IfNisAmt?: number;
            /**
             * Format: decimal
             * @description Club managment fee
             */
            MngtFeeNis?: number;
            /**
             * Format: decimal
             * @description Charged VAT
             */
            VatIfNis?: number;
            /**
             * Format: decimal
             * @description Deposit Amount
             */
            DepositAmount?: number;
            BusinessName?: string | null;
            /** @description Business Registration Number */
            BusinessRegistrationNumber?: string | null;
            City?: string | null;
            Address1?: string | null;
            Address2?: string | null;
            HouseNumber?: string | null;
            Email?: string | null;
            Phone?: string | null;
            /** Format: int32 */
            SapakNumber?: number;
            /** @description Invoice email recipient */
            EmailRecipient?: string | null;
            /** @description Bank Deposits */
            BankDeposits?: components["schemas"]["BankDeposites"][] | null;
        };
        SlikaInvoicesRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /** @description Form Create Date DDMMYYYY */
            FromCreateDate: string;
            /** @description To Create Date DDMMYYYY */
            ToCreateDate: string;
        };
        PrepareDeviceResponse: {
            /**
             * Format: int32
             * @description Response code: 0 - Success / Other values - Error (See Description for more info)
             */
            ResponseCode?: number;
            /** @description Description for ResponseCode */
            Description?: string | null;
            /** @description TPN for TapOnPhone device */
            TPN?: string | null;
            /** @description Merchant Code for TapOnPhone device */
            MerchantCode?: string | null;
            /** @description Sapak Mutav Number of the sent Cardcom terminal number in the rquest */
            SapakMutavNumber?: string | null;
            /**
             * Format: int32
             * @description Cardcom Rav Mutav terminal number of the sent Cardcom terminal number in the rquest
             */
            RavMutavTerminalNumber?: number | null;
        };
        PrepareDeviceRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Terminal number at Cardcom
             */
            TerminalNumber?: number;
            /** @description Mobile device UUID */
            DeviceUUID: string;
            /** @description Mobile device manufacturer */
            DeviceManufacturer?: string | null;
            /** @description Mobile device model */
            DeviceModel?: string | null;
        };
        ProcessTransactionResponse: {
            /**
             * Format: int32
             * @description Response code: 0 - Success / Other values - Error (See Description for more info)
             */
            ResponseCode?: number;
            /** @description Description for ResponseCode */
            Description?: string | null;
            /**
             * Format: int64
             * @description Deal number in Cardcom systems
             */
            DealNumber?: number | null;
        };
        ProcessTransactionRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Terminal number at Cardcom
             */
            TerminalNumber?: number;
            /**
             * Format: int32
             * @description The value returned in the PrepareDevice response
             */
            RavMutavTerminalNumber?: number | null;
            /** @description Mobile device UUID */
            DeviceUUID: string;
            /** @description SDK transaction info */
            TransactionInfo: components["schemas"]["SdkTransactionInfo"];
        };
        SdkTransactionInfo: {
            /** @description Tap transaction total sum */
            Amount: string;
            /**
             * Format: int32
             * @description Tap transaction type: 1 - Charge / 51 - Refund
             */
            Type: number;
            /**
             * Format: int32
             * @description Tap transaction credit type: 1 - Single payment / 6 - Credit payments / 8 - Regular payments
             */
            CreditType: number;
            /**
             * Format: int32
             * @description Tap transaction number of payments
             */
            NumberOfPayments: number;
            /** @description Tap transaction customer name */
            CustomerName: string;
            /** @description Tap transaction customer name email */
            CustomerEmail?: string | null;
            /** @description Tap transaction customer phone number */
            CustomerPhoneNumber?: string | null;
            /** @description Tap transaction customer id number */
            CustomerIdNumber?: string | null;
            /**
             * Format: int32
             * @description Tap transaction response code
             */
            ResponseCode: number;
            /** @description Tap transaction message */
            Message: string;
            /** @description Tap transaction status */
            Status: string;
            /**
             * Format: int32
             * @description Tap transaction id
             */
            TransactionId: number;
            /**
             * Format: int32
             * @description Tap transaction return code
             */
            ReturnCode: number;
            /** @description Tap transaction return message */
            ReturnMessage: string;
            /** @description Tap transaction card number */
            CardNumber: string;
            /** @description Tap transaction card expire month and year in MM/YY format */
            CardExpireDateMMYY: string;
            /**
             * Format: int32
             * @description Tap transaction card brand code
             */
            CardBrandCode: number;
            /**
             * Format: int32
             * @description Tap transaction card issuer code
             */
            CardIssuerCode: number;
            /**
             * Format: int32
             * @description Tap transaction card financer code
             */
            CardFinancerCode: number;
            /** @description Tap transaction card token */
            Token: string;
            /** @description Tap transaction approval number */
            ApprovalNumber: string;
            /** @description Tap transaction result record */
            ResultRecord: string;
            /** @description Tap transaction UID */
            UID: string;
        };
        GetTransactionsRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Terminal number at Cardcom
             */
            TerminalNumber?: number;
            /**
             * Format: date-time
             * @description Date for a search from a specific date
             */
            FromDate: string;
            /**
             * Format: date-time
             * @description Date for searching up to a specific date
             */
            ToDate: string;
        };
        GetDevicesRequest: {
            /** @description Api Name for authentication */
            ApiName?: string;
            /** @description Api password for authentication */
            ApiPassword?: string;
            /**
             * Format: int32
             * @description Terminal number at Cardcom
             */
            TerminalNumber?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    LowProfile_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateLowProfile"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateLowProfileResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    LowProfile_GetLpResult: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetLowProfileResult"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LowProfileResult"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    RecuringPayments_GetMuhlafimFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetMuhlafimRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DtoResponseOfMuhlafimData"];
                };
            };
        };
    };
    RecuringPayments_GetRecurringPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body Params */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecurringPaymentQuery"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtGetRecurringPaymentRsp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    RecuringPayments_GetRecurringPaymentHistory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body Params */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecurringPaymentHistoryQuery"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtGetRecurringPaymentHistoryRsp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    RecuringPayments_GetMuhlafimByDate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MuhlafimByDateRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtGetListOfFilesRsp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    RecuringPayments_IsBankNumberValid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body Params */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IsBankNumberValidReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtIsBankNumberValidRsp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    RecuringPayments_ChangeStatusForHistoryRecurringToIrrevocable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChangeStatusForHistoryRecurringToIrrevocableReqest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtIsBankNumberValidRsp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username or password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Account_GetByAccountId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetAccountById"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountByIdResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_ListTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ListTransactionsReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTranzactionsResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_GetTransactionInfoById: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionInfoRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtShvaParams"][];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_Transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransactionReq"] | null;
            };
        };
        responses: {
            /** @description successful request, see 'ResponseCode' if request succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionInfo"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_RefundByTransactionId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundByTransactionIdReq"] | null;
            };
        };
        responses: {
            /** @description successful request, see 'ResponseCode' if request succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefundByTransactionIdResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_SpecialTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SpecialTransactionsReq"] | null;
            };
        };
        responses: {
            /** @description successful request, see 'ResponseCode' if request succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTransactionsResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Transactions_GetTransactionByExternalUniqTran: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetExternalUniqTranIdStatusReq"] | null;
            };
        };
        responses: {
            /** @description successful request, see 'ResponseCode' if request succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionInfo"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_CreateDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateDocumentRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentInfo"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_CancelDoc: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CancelDocRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelDocResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_SendAllDocumentsToEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendAllDocumentsToEmailRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendAllDocumentsToEmailResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_GetReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DocumentSearchRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentSearchResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_CrossDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CrossDocumentRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrossDocumentResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_CreateTaxInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateTaxInvoiceRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Documents_CreateDocumentUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetDocumentRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDocumentUrlResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    CompanyOperations_GetCompanyStatus: {
        parameters: {
            query: {
                companyNumber: number;
                TerminalNumber?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
        };
    };
    CompanyOperations_AddDocumentToCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcquiredCompanyAccountFileUpload"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenNewCompanyResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    CompanyOperations_ValidateCompanyCreation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcquiredCompanyAccountWithDocuments"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RSContent"];
                };
            };
        };
    };
    CompanyOperations_NewCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcquiredCompanyAccount"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenNewCompanyResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    CompanyOperations_CloseCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcquiredCompanyAccount"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenNewCompanyResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    CompanyOperations_ReOpenCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcquiredCompanyAccount"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenNewCompanyResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    CompanyOperations_GetCities: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
                startwith?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataGov_CityCodes"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetStreets: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
                cityCode: number;
                startwith?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataGov_StreetCodes"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetCountries: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountriesISO"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetBanks: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Banks"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetBanksBranches: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
                bankNumber: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanksBranches"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetMainMCCs: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCC_DBs_MAIN"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_GetSubMCCs: {
        parameters: {
            query: {
                SupplierUserName: string | null;
                secret: string | null;
                mccCode: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCC_DBs"][];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CompanyOperations_MeagedAddCompany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeagedOpenRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenMeagedResponse"];
                };
            };
        };
    };
    CompanyOperations_MeagedGetCompanyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeagedGetCompanyInfoReuqest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeagedGetCompanyInfoResponse"];
                };
            };
        };
    };
    Financial_CreditCardTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCardTransactionsReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditCardTransactionsResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Financial_CreditCardTransactionsHalted: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCardTransactionsHaltedReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditCardTransactionsHaltedResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Financial_FinancialTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FinancialTransactionsReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancialTransactionsResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Financial_BankDeposites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BankDepositesReq"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankDepositesResp"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    Financial_GetSlikaInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SlikaInvoicesRequest"] | null;
            };
        };
        responses: {
            /** @description successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlikaInvoicesResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    TapTransactions_PrepareDevice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PrepareDeviceRequest"] | null;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrepareDeviceResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    TapTransactions_ProcessTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProcessTransactionRequest"] | null;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessTransactionResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    TapTransactions_GetTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetTransactionsRequest"] | null;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessTransactionResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
    TapTransactions_GetDevices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetDevicesRequest"] | null;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessTransactionResponse"];
                };
            };
            /** @description Invalid request , see 'Description' in response for more information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
            /** @description Invalid username */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInfo"];
                };
            };
        };
    };
}
